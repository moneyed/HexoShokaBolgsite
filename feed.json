{
    "version": "https://jsonfeed.org/version/1",
    "title": "Tian's NoteBook",
    "subtitle": "",
    "icon": "https://github.com/moneyed/HexoShokaBolgsite.github.io.git/images/favicon.ico",
    "description": "jdjakjkjajdlgjalgkdddda",
    "home_page_url": "https://github.com/moneyed/HexoShokaBolgsite.github.io.git",
    "items": [
        {
            "id": "https://github.com/moneyed/HexoShokaBolgsite.github.io.git/java%E5%9F%BA%E7%A1%80/Collectionpractice5/ArrayList/",
            "url": "https://github.com/moneyed/HexoShokaBolgsite.github.io.git/java%E5%9F%BA%E7%A1%80/Collectionpractice5/ArrayList/",
            "title": "",
            "date_published": "2023-08-10T08:12:06.855Z",
            "content_html": "<p>title: ArrayList 的源码分析<br />\n sticky: true<br />\ndate: 2023/7/24<br />\ncategories:</p>\n<ul>\n<li>java<br />\ntags:</li>\n<li>java</li>\n<li>基础<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 2.ArrayList的源码分析：</span></span><br><span class=\"line\"><span class=\"comment\"> *   2.1 jdk 7情况下</span></span><br><span class=\"line\"><span class=\"comment\">     ArrayList list = new ArrayList();//底层创建了长度是10的Object[]数组elementData</span></span><br><span class=\"line\"><span class=\"comment\"> *      list.add(123);//elementData[0] = new Integer(123);</span></span><br><span class=\"line\"><span class=\"comment\"> *      ...</span></span><br><span class=\"line\"><span class=\"comment\"> *      list.add(11);//如果此次的添加导致底层elementData数组容量不够，则扩容。</span></span><br><span class=\"line\"><span class=\"comment\"> *      默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      结论：建议开发中使用带参的构造器：ArrayList list = new ArrayList(int capacity)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   2.2 jdk 8中ArrayList的变化：</span></span><br><span class=\"line\"><span class=\"comment\"> *      ArrayList list = new ArrayList();//底层Object[] elementData初始化为&#123;&#125;.并没有创建长度为10的数组</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      list.add(123);//第一次调用add()时，底层才创建了长度10的数组，并将数据123添加到elementData[0]</span></span><br><span class=\"line\"><span class=\"comment\"> *      ...</span></span><br><span class=\"line\"><span class=\"comment\"> *      后续的添加和扩容操作与jdk 7 无异。</span></span><br><span class=\"line\"><span class=\"comment\"> *   2.3 小结：jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象</span></span><br><span class=\"line\"><span class=\"comment\"> *            的创建类似于单例的懒汉式，延迟了数组的创建，节省内存。</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://github.com/moneyed/HexoShokaBolgsite.github.io.git/hello-world/",
            "url": "https://github.com/moneyed/HexoShokaBolgsite.github.io.git/hello-world/",
            "title": "Hello World",
            "date_published": "2023-07-23T16:00:00.000Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": [
                "hexo",
                "hexo"
            ]
        },
        {
            "id": "https://github.com/moneyed/HexoShokaBolgsite.github.io.git/java%E5%9F%BA%E7%A1%80/java/",
            "url": "https://github.com/moneyed/HexoShokaBolgsite.github.io.git/java%E5%9F%BA%E7%A1%80/java/",
            "title": "java基础",
            "date_published": "2023-07-23T16:00:00.000Z",
            "content_html": "<ul>\n<li><a href=\"#javase\">JavaSE</a>\n<ul>\n<li><a href=\"#%E5%AD%97%E8%8A%82\">字节</a></li>\n</ul>\n</li>\n<li><a href=\"#java%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\">java 语言开发环境搭建</a>\n<ul>\n<li><a href=\"#java%E8%99%9A%E6%8B%9F%E6%9C%BA--jvm\">java 虚拟机 --jvm</a></li>\n<li><a href=\"#jre%E5%92%8Cjdk\">JRE 和 JDK</a></li>\n<li><a href=\"#jdk%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85\">jdk 下载安装</a></li>\n<li><a href=\"#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE\">环境变量的配置</a></li>\n</ul>\n</li>\n<li><a href=\"#hello-world\">Hello World</a>\n<ul>\n<li><a href=\"#%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4%E8%AF%B4%E6%98%8E\">程序开发步骤说明</a></li>\n<li><a href=\"#%E7%BC%96%E5%86%99java%E6%BA%90%E7%A8%8B%E5%BA%8F\">编写 java 源程序</a></li>\n<li><a href=\"#%E6%A0%87%E8%AF%86%E7%AC%A6\">标识符</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%B8%B8%E9%87%8F\">常量</a>\n<ul>\n<li><a href=\"#%E6%A6%82%E8%BF%B0\">概述</a></li>\n<li><a href=\"#%E5%88%86%E7%B1%BB\">分类</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">变量和数据类型</a>\n<ul>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%86%E7%B1%BB\">数据类型分类</a></li>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">基本数据类型</a></li>\n<li><a href=\"#%E5%8F%98%E9%87%8F\">变量</a></li>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\">数据类型转换</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\">运算符</a>\n<ul>\n<li><a href=\"#%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6\">算数运算符</a></li>\n<li><a href=\"#%E8%87%AA%E5%A2%9E%E8%87%AA%E5%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6\">自增自减运算符</a></li>\n<li><a href=\"#%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\">赋值运算符</a></li>\n<li><a href=\"#%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6\">比较运算符</a></li>\n<li><a href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\">逻辑运算符</a></li>\n<li><a href=\"#%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6\">三元运算符</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%96%B9%E6%B3%95%E5%85%A5%E9%97%A8\">方法入门</a>\n<ul>\n<li><a href=\"#%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89\">方法的定义</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%90%84%E7%A7%8D%E8%AF%AD%E5%8F%A5\">各种语句</a>\n<ul>\n<li><a href=\"#if-%E8%AF%AD%E5%8F%A5\">if 语句</a></li>\n<li><a href=\"#swithch%E8%AF%AD%E5%8F%A5\">swithch 语句</a></li>\n<li><a href=\"#%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5\">循环语句</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8scanner%E7%B1%BB\">使用 scanner 类</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%95%B0%E7%BB%84\">数组</a>\n<ul>\n<li><a href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E6%A6%82%E8%BF%B0\">数组的概述</a></li>\n<li><a href=\"#%E5%86%85%E5%AD%98\">内存</a></li>\n<li><a href=\"#%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84\">二维数组</a></li>\n<li><a href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E5%86%85%E5%AD%98%E8%A7%A3%E6%9E%90%E8%A7%81arraytest3java\">数组的内存解析：见 ArrayTest3.java</a></li>\n<li><a href=\"#%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95\">数组元素的排序算法</a></li>\n<li><a href=\"#%E5%8D%81%E5%A4%A7%E5%86%85%E9%83%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95\">十大内部排序算法</a></li>\n<li><a href=\"#%E6%95%B0%E7%BB%84%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E7%AE%97%E6%B3%95\">数组中常见的算法</a></li>\n<li><a href=\"#arrays-%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8\">Arrays 工具类的使用</a></li>\n<li><a href=\"#%E6%95%B0%E7%BB%84%E4%BD%BF%E7%94%A8%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8\">数组使用中的常见异常</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%8A\">面向对象 (上)</a>\n<ul>\n<li><a href=\"#%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8Bpop%E4%B8%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1oop\">面向过程 (POP) 与面向对象 (OOP)</a></li>\n<li><a href=\"#%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1\">类和对象</a></li>\n<li><a href=\"#java-%E7%B1%BB%E5%8F%8A%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98\">Java 类及类的成员</a></li>\n<li><a href=\"#%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8\">类与对象的创建及使用</a></li>\n<li><a href=\"#%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%E5%86%85%E5%AD%98%E8%A7%A3%E6%9E%90\">对象的创建和使用：内存解析</a></li>\n<li><a href=\"#%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98%E4%B9%8B%E4%B8%80%E5%B1%9E%E6%80%A7\">类的成员之一：属性</a></li>\n<li><a href=\"#%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98%E4%B9%8B%E4%BA%8C%E6%96%B9%E6%B3%95\">类的成员之二：方法</a>\n<ul>\n<li><a href=\"#%E7%B1%BB%E4%B8%AD%E6%96%B9%E6%B3%95%E7%9A%84%E5%A3%B0%E6%98%8E%E5%92%8C%E4%BD%BF%E7%94%A8\">类中方法的声明和使用</a></li>\n<li><a href=\"#%E7%90%86%E8%A7%A3%E4%B8%87%E4%BA%8B%E4%B8%87%E7%89%A9%E7%9A%86%E5%AF%B9%E8%B1%A1\">理解” 万事万物皆对象 “</a></li>\n<li><a href=\"#%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E7%9A%84%E5%86%85%E5%AD%98%E8%A7%A3%E6%9E%90\">对象数组的内存解析</a></li>\n<li><a href=\"#%E5%8F%AF%E5%8F%98%E4%B8%AA%E6%95%B0%E7%9A%84%E5%BD%A2%E5%8F%82\">可变个数的形参</a></li>\n<li><a href=\"#%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E7%9A%84%E5%80%BC%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6%E9%87%8D%E7%82%B9\">方法参数的值传递机制 (重点！！！)</a></li>\n<li><a href=\"#%E9%80%92%E5%BD%92recursion%E6%96%B9%E6%B3%95\">递归 (recursion) 方法</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%B9%E5%BE%81%E4%B9%8B%E4%B8%80%E5%B0%81%E8%A3%85%E4%B8%8E%E9%9A%90%E8%97%8F\">面向对象特征之一：封装与隐藏</a>\n<ul>\n<li><a href=\"#%E5%9B%9B%E7%A7%8D%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E6%B5%8B%E8%AF%95\">四种权限修饰符的理解与测试</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98%E4%B8%89%E6%9E%84%E9%80%A0%E5%99%A8%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95\">类的成员三：构造器 (构造方法)</a>\n<ul>\n<li><a href=\"#%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E7%90%86%E8%A7%A3\">构造器的理解</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC%E7%9A%84%E8%BF%87%E7%A8%8B\">总结属性赋值的过程</a></li>\n<li><a href=\"#javabean-%E7%9A%84%E4%BD%BF%E7%94%A8\">JavaBean 的使用</a></li>\n<li><a href=\"#uml%E7%B1%BB%E5%9B%BE\">UML 类图</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%85%B3%E9%94%AE%E5%AD%97this%E7%9A%84%E4%BD%BF%E7%94%A8\">关键字 this 的使用</a>\n<ul>\n<li><a href=\"#this-%E8%B0%83%E7%94%A8%E5%B1%9E%E6%80%A7%E6%96%B9%E6%B3%95%E6%9E%84%E9%80%A0%E5%99%A8\">this 调用属性、方法、构造器</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%85%B3%E9%94%AE%E5%AD%97packageimport-%E7%9A%84%E4%BD%BF%E7%94%A8\">关键字：package、import 的使用</a>\n<ul>\n<li><a href=\"#%E5%85%B3%E9%94%AE%E5%AD%97package\">关键字 —package</a></li>\n<li><a href=\"#mvc-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\">MVC 设计模式</a></li>\n<li><a href=\"#%E5%85%B3%E9%94%AE%E5%AD%97-import\">关键字 - import</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%AD\">面向对象 (中)</a>\n<ul>\n<li><a href=\"#%E7%BB%A7%E6%89%BF%E6%80%A7%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E7%90%86%E8%A7%A3\">继承性的使用与理解</a></li>\n<li><a href=\"#%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99overrideoverwrite\">方法的重写 (override/overwrite)</a></li>\n<li><a href=\"#super%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%BF%E7%94%A8\">super 关键字的使用</a></li>\n<li><a href=\"#%E5%AD%90%E7%B1%BB%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%BF%87%E7%A8%8B\">子类对象的实例化过程</a></li>\n<li><a href=\"#%E5%A4%9A%E6%80%81%E6%80%A7\">多态性</a>\n<ul>\n<li><a href=\"#%E8%99%9A%E6%8B%9F%E6%96%B9%E6%B3%95%E7%9A%84%E8%A1%A5%E5%85%85\">虚拟方法的补充</a></li>\n<li><a href=\"#%E5%90%91%E4%B8%8B%E8%BD%AC%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8\">向下转型的使用</a></li>\n<li><a href=\"#instanceof-%E5%85%B3%E9%94%AE%E5%AD%97%E9%83%BD%E4%BD%BF%E7%94%A8\">instanceof 关键字都使用</a></li>\n</ul>\n</li>\n<li><a href=\"#object%E7%B1%BB%E9%83%BD%E7%9A%84%E4%BD%BF%E7%94%A8\">Object 类都的使用</a>\n<ul>\n<li><a href=\"#object%E7%B1%BB%E7%9A%84%E4%B8%BB%E8%A6%81%E5%AF%B9%E8%B1%A1\">object 类的主要对象</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%8C%85%E8%A3%85%E7%B1%BBwrapper%E7%9A%84%E4%BD%BF%E7%94%A8\">包装类（Wrapper）的使用</a>\n<ul>\n<li><a href=\"#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8\">单元测试方法的使用</a></li>\n<li><a href=\"#%E5%8C%85%E8%A3%85%E7%B1%BB%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2\">包装类与基本数据类型相互转换</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%8B\">面向对象（下）</a>\n<ul>\n<li><a href=\"#%E5%85%B3%E9%94%AE%E5%AD%97static\">关键字 static</a>\n<ul>\n<li><a href=\"#%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\">单例设计模式</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%90%86%E8%A7%A3main%E6%96%B9%E6%B3%95%E7%9A%84%E8%AF%AD%E6%B3%95%E4%BA%86%E8%A7%A3\">理解 main 方法的语法（了解）</a></li>\n<li><a href=\"#%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98%E4%B9%8B%E5%9B%9B%E4%BB%A3%E7%A0%81%E5%9D%97\">类的成员之四：代码块</a></li>\n<li><a href=\"#%E5%85%B3%E9%94%AE%E5%AD%97final\">关键字：final</a></li>\n<li><a href=\"#%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95\">抽象类与抽象方法</a>\n<ul>\n<li><a href=\"#abstract-%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%BF%E7%94%A8\">abstract 关键字的使用</a></li>\n<li><a href=\"#%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%BA%94%E7%94%A8\">抽象类应用</a></li>\n<li><a href=\"#%E5%88%9B%E5%BB%BA%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BF%E5%90%8D%E5%AD%90%E7%B1%BB%E5%AF%B9%E8%B1%A1\">创建抽象类的匿名子类对象</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%8E%A5%E5%8F%A3\">接口</a>\n<ul>\n<li><a href=\"#%E6%A6%82%E8%BF%B0-1\">概述</a></li>\n<li><a href=\"#%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%94%E7%94%A8%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8Fproxy\">接口的应用：代理模式 (proxy)</a></li>\n<li><a href=\"#%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%94%E7%94%A8%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F\">接口的应用：工厂模式</a></li>\n</ul>\n</li>\n<li><a href=\"#java8%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%B0%86%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%94%B9%E8%BF%9B\">Java8 中关于将接口的改进</a></li>\n<li><a href=\"#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E6%88%90%E5%91%98%E4%B9%8B%E4%BA%94%E5%86%85%E9%83%A8%E7%B1%BB\">类的内部成员之五：内部类</a>\n<ul>\n<li><a href=\"#%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB\">匿名内部类</a></li>\n<li><a href=\"#%E5%B1%80%E9%83%A8%E5%86%85%E9%83%A8%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F\">局部内部类的使用注意</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E5%BC%82%E5%B8%B8\">异常</a>\n<ul>\n<li><a href=\"#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6%E4%B8%80try-catch-findally\">异常处理机制一：try-catch-findally</a></li>\n<li><a href=\"#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6%E4%BA%8Cthrows\">异常处理机制二：throws</a></li>\n<li><a href=\"#%E6%89%8B%E5%8A%A8%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8\">手动抛出异常</a></li>\n<li><a href=\"#%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%B1%BB\">用户自定义异常类</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B\">多线程</a>\n<ul>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E7%A8%8B%E5%BA%8F%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B\">基本概念：程序、进程、线程</a>\n<ul>\n<li><a href=\"#%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B\">进程与线程</a></li>\n<li><a href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BC%98%E7%82%B9\">多线程的优点</a></li>\n<li><a href=\"#%E4%BD%95%E6%97%B6%E9%9C%80%E8%A6%81%E5%A4%9A%E7%BA%BF%E7%A8%8B\">何时需要多线程</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8\">线程的创建和使用</a>\n<ul>\n<li><a href=\"#%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%90%AF%E5%8A%A8\">线程的创建和启动</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\">线程的生命周期</a></li>\n<li><a href=\"#%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%84%E7%90%86%E5%AE%9E%E7%8E%B0runnable%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98\">同步代码块处理实现 Runnable 的线程安全问题</a></li>\n<li><a href=\"#%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%84%E7%90%86%E7%BB%A7%E6%89%BFthread%E7%B1%BB%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98\">同步代码块处理继承 Thread 类的线程安全问题</a></li>\n<li><a href=\"#%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E5%A4%84%E7%90%86%E5%AE%9E%E7%8E%B0runnable%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98\">同步方法处理实现 Runnable 的线程安全问题</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%B8%B8%E7%94%A8%E7%B1%BB\">常用类</a>\n<ul>\n<li><a href=\"#string%E7%B1%BB%E7%9A%84%E6%A6%82%E8%BF%B0\">String 类的概述</a></li>\n<li><a href=\"#string%E4%B8%8D%E5%90%8C%E5%AE%9E%E4%BE%8B%E5%8C%96%E6%96%B9%E5%BC%8F%E7%9A%84%E5%AF%B9%E6%AF%941\">String 不同实例化方式的对比 1</a></li>\n<li><a href=\"#string%E4%B8%8D%E5%90%8C%E6%8B%BC%E6%8E%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AF%B9%E6%AF%94\">String 不同拼接操作的对比</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%92%8C%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8\">枚举类和注解的使用</a>\n<ul>\n<li><a href=\"#%E6%9E%9A%E4%B8%BE%E7%B1%BB%E7%9A%84%E7%90%86%E8%A7%A3\">枚举类的理解</a></li>\n<li><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9E%9A%E4%B8%BE%E7%B1%BB\">自定义枚举类</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8enum%E5%85%B3%E9%94%AE%E5%AD%97%E5%AE%9A%E4%B9%89%E6%9E%9A%E4%B8%BE%E7%B1%BB\">使用 enum 关键字定义枚举类</a></li>\n<li><a href=\"#eunum%E7%B1%BB%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\">eunum 类中的常用方法</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8enum%E5%85%B3%E9%94%AE%E5%AD%97%E5%AE%9A%E4%B9%89%E7%9A%84%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3\">使用 enum 关键字定义的枚举类实现接口</a></li>\n<li><a href=\"#%E6%B3%A8%E8%A7%A3%E7%9A%84%E7%90%86%E8%A7%A3\">注解的理解</a></li>\n<li><a href=\"#annotaton%E7%9A%84%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B\">Annotaton 的使用示例</a></li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3\">如何自定义注解</a></li>\n<li><a href=\"#jdk%E4%B8%AD4%E4%B8%AA%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%85%83%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A81\">jdK 中 4 个基本的元注解的使用 1</a></li>\n<li><a href=\"#jdk%E4%B8%AD4%E4%B8%AA%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%85%83%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A82\">jdk 中 4 个基本的元注解的使用 2</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%9B%86%E5%90%88\">集合</a>\n<ul>\n<li><a href=\"#%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E4%B8%8E%E6%95%B0%E7%BB%84%E7%9A%84%E5%AF%B9%E6%AF%94%E5%8F%8A%E6%A6%82%E8%BF%B0\">集合框架与数组的对比及概述</a></li>\n<li><a href=\"#%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E6%B6%89%E5%8F%8A%E5%88%B0%E7%9A%84api\">集合框架涉及到的 API</a></li>\n<li><a href=\"#collection-%E6%8E%A5%E5%8F%A3%E6%96%B9%E6%B3%95\">Collection 接口方法</a>\n<ul>\n<li><a href=\"#collection%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%951\">Collection 接口中的常用方法 1</a></li>\n<li><a href=\"#collection%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%952\">Collection 接口中的常用方法 2</a></li>\n<li><a href=\"#collection%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%953\">Collection 接口中的常用方法 3</a></li>\n<li><a href=\"#collection%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%954\">Collection 接口中的常用方法 4</a></li>\n</ul>\n</li>\n<li><a href=\"#iterator%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%8E%A5%E5%8F%A3\">Iterator 迭代器接口</a>\n<ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8iterator%E9%81%8D%E5%8E%86collection\">使用 Iterator 遍历 Collection</a></li>\n<li><a href=\"#iterator%E8%BF%AD%E4%BB%A3%E5%99%A8remove%E7%9A%84%E4%BD%BF%E7%94%A8\">Iterator 迭代器 remove () 的使用</a></li>\n<li><a href=\"#java%E6%96%B0%E7%89%B9%E6%80%A7foreach%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86%E9%9B%86%E5%90%88%E6%88%96%E6%95%B0%E7%BB%84\">java 新特性 foreach 循环遍历集合或数组</a></li>\n</ul>\n</li>\n<li><a href=\"#collection%E5%AD%90%E6%8E%A5%E5%8F%A3%E4%B9%8B%E4%B8%80list%E6%8E%A5%E5%8F%A3\">Collection 子接口之一：List 接口</a>\n<ul>\n<li><a href=\"#list%E6%8E%A5%E5%8F%A3%E5%B8%B8%E7%94%A8%E5%AE%9E%E7%8E%B0%E7%B1%BB%E7%9A%84%E5%AF%B9%E6%AF%94\">List 接口常用实现类的对比</a></li>\n<li><a href=\"#arraylist%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\">ArrayList 的源码分析</a></li>\n<li><a href=\"#likedlist%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\">LikedList 源码分析</a></li>\n<li><a href=\"#list%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%B5%8B%E8%AF%95\">List 接口中的常用方法测试</a></li>\n</ul>\n</li>\n<li><a href=\"#collection%E5%AD%90%E6%8E%A5%E5%8F%A3%E4%B9%8B%E4%BA%8Cset%E6%8E%A5%E5%8F%A3\">Collection 子接口之二：Set 接口</a>\n<ul>\n<li><a href=\"#set%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E7%B1%BB%E7%9A%84%E5%AF%B9%E6%AF%94\">Set 接口实现类的对比</a></li>\n<li><a href=\"#set%E7%9A%84%E6%97%A0%E5%BA%8F%E6%80%A7%E4%B8%8E%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E6%80%A7%E7%9A%84%E7%90%86%E8%A7%A3\">Set 的无序性与不可重复性的理解</a></li>\n<li><a href=\"#hashset%E4%B8%AD%E5%85%83%E7%B4%A0%E7%9A%84%E6%B7%BB%E5%8A%A0%E8%BF%87%E7%A8%8B\">HashSet 中元素的添加过程</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E6%B3%9B%E5%9E%8B\">泛型</a><br />\n - <a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89%E6%B3%9B%E5%9E%8B\">为什么要有泛型</a><br />\n - <a href=\"#%E6%B3%9B%E5%9E%8B%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%83%8C%E6%99%AF\">泛型的设计背景</a></li>\n<li><a href=\"#file%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8\">File 类的使用</a></li>\n</ul>\n<h1 id=\"javase\"><a class=\"anchor\" href=\"#javase\">#</a> JavaSE</h1>\n<h3 id=\"字节\"><a class=\"anchor\" href=\"#字节\">#</a> 字节</h3>\n<p><mark>字节</mark>是常见的计算机最小存储单元。计算机存储任何的数据，都是以字节的形式存储。</p>\n<p><mark>8 个 bit (二进制位) 0000-0000 表示 1 个字节，记 1byte 或 1B</mark></p>\n<ul>\n<li>\n<p>8 bit = 1 Byte</p>\n</li>\n<li>\n<p>1024 B = 1 KB</p>\n</li>\n<li>\n<p>1024 kb =1 MB</p>\n</li>\n<li>\n<p>1024 MB =1 GB</p>\n</li>\n<li>\n<p>1024 GB =1 TB</p>\n</li>\n</ul>\n<hr />\n<h1 id=\"java语言开发环境搭建\"><a class=\"anchor\" href=\"#java语言开发环境搭建\">#</a> java 语言开发环境搭建</h1>\n<h3 id=\"java虚拟机-jvm\"><a class=\"anchor\" href=\"#java虚拟机-jvm\">#</a> java 虚拟机 --jvm</h3>\n<p>java 的虚拟机本身不具备跨平台功能的，每个操作系统都有不同版本的虚拟机，如下图所示：</p>\n<ul>\n<li>语言解释器</li>\n<li>跨平台</li>\n</ul>\n<p><img data-src=\"/images/2022-10-21-14-38-05.png\" alt=\"\" /></p>\n<h3 id=\"jre和jdk\"><a class=\"anchor\" href=\"#jre和jdk\">#</a> JRE 和 JDK</h3>\n<ul>\n<li>JRE:java 程序的运行环境，包含 jvm 和运行所需的核心类库</li>\n<li>JDK:java 程序开发包，包含 JRE 和开发人员工具</li>\n</ul>\n<p>如果想运行一个已有的 java 程序，只需安装 JRE 即可，如果想要开发一个全新的 java 程序，就必须安装 JDK。</p>\n<p><img data-src=\"/images/2022-10-21-14-38-23.png\" alt=\"\" /></p>\n<h3 id=\"jdk下载安装\"><a class=\"anchor\" href=\"#jdk下载安装\">#</a> jdk 下载安装</h3>\n<h3 id=\"环境变量的配置\"><a class=\"anchor\" href=\"#环境变量的配置\">#</a> 环境变量的配置</h3>\n<hr />\n<h1 id=\"hello-world\"><a class=\"anchor\" href=\"#hello-world\">#</a> Hello World</h1>\n<h3 id=\"程序开发步骤说明\"><a class=\"anchor\" href=\"#程序开发步骤说明\">#</a> 程序开发步骤说明</h3>\n<p>java 程序开发三步骤：</p>\n<ul>\n<li>编写</li>\n<li>编译</li>\n<li>运行</li>\n</ul>\n<p><img data-src=\"/images/2022-10-21-14-38-52.png\" alt=\"\" /></p>\n<h3 id=\"编写java源程序\"><a class=\"anchor\" href=\"#编写java源程序\">#</a> 编写 java 源程序</h3>\n<ul>\n<li>\n<p>步骤</p>\n<ol>\n<li>新建文本 txt，后缀名为.java</li>\n<li>用记事本打开</li>\n<li>在文本中输入代码<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Helloworld &#123;</span><br><span class=\"line\">public static void main(String[ ] args)&#123;</span><br><span class=\"line\">System.out.println(&quot;Hello world!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>编译和运行文件</p>\n<ol>\n<li>编译：cmd-javac ' 文件.java'----&gt;' 文件.class'</li>\n<li>运行：java ' 文件 '----&gt; 打印 helloworld</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"标识符\"><a class=\"anchor\" href=\"#标识符\">#</a> 标识符</h3>\n<ul>\n<li>命名规则：\n<ul>\n<li>标识符可以包含 | 英文字母 26 个 (区分大小写)、0-9 数字、$(美元符号）和_f 下划线)</li>\n<li>标识符不能以数字开头。</li>\n<li>标识符不能是关键字</li>\n</ul>\n</li>\n<li>命名规范：\n<ul>\n<li>类名规范：首字母大写，后面每个单词首字母大写 (大驼峰式)。</li>\n<li>变量名规范：首字母小写，后面每个单词首字母大写 (小驼峰式)。</li>\n<li>方法名规范：同变量名。</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h1 id=\"常量\"><a class=\"anchor\" href=\"#常量\">#</a> 常量</h1>\n<h3 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h3>\n<ul>\n<li>常量：指程序运行期间不变的量</li>\n</ul>\n<h3 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h3>\n<ul>\n<li>常量的分类:\n<ul>\n<li>1．字符串常量：凡是用双引号引起来的部分，叫做字符串常量。例如: &quot;abc&quot;、&quot;Hello&quot;、&quot;123</li>\n<li>2．整数常量：直接写上的数字，没有小数点。例如：100、200、0、-250</li>\n<li>3．浮点数常量：直接写上的数字，有小数点。例如：2.5、-3.14、0.0</li>\n<li>4．字符常量：凡是用单引号引起来的单个字符，就做字符常量。例如: 'A'、'b'、'9'、' 中'</li>\n<li>5. 布尔常量：只有量中取值。true、 false.</li>\n<li>6．空常量: null。代表没有任何数据</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h1 id=\"变量和数据类型\"><a class=\"anchor\" href=\"#变量和数据类型\">#</a> 变量和数据类型</h1>\n<h3 id=\"数据类型分类\"><a class=\"anchor\" href=\"#数据类型分类\">#</a> 数据类型分类</h3>\n<ul>\n<li>基本数据类型：\n<ul>\n<li>整数 byte short int long</li>\n<li>浮点型 float double</li>\n<li>字符 char</li>\n<li>布尔 boolean</li>\n</ul>\n</li>\n<li>引用数据类型\n<ul>\n<li>类</li>\n<li>数组</li>\n<li>接口</li>\n<li>字符串</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h3>\n<p><img data-src=\"/images/2022-10-21-14-39-08.png\" alt=\"\" /><br />\n<mark>注：浮点数默认类型是 double, 如果要使用 float 类型，需加上一个后缀 F。整数默认为 int，如果要使用 lone 类型，需加上一个后缀 L</mark></p>\n<h3 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h3>\n<ul>\n<li>概述\n<ul>\n<li>程序运行期间可以改变的量</li>\n</ul>\n</li>\n<li>使用变量的注意事项\n<ul>\n<li>1．如果创建多个变量，那么变量之间的名称不可以重复。</li>\n<li>2．对于 float 和 long 类型来说，字母后缀 F 和 L 不要丢掉。</li>\n<li>3．如果使用 byte 或者 short 类型的变量，那么右侧的数据值不能超过左侧类型的范围。</li>\n<li>4．没有进行赋值的变量，不能直接使用；一定要赋值之后，才能使用。</li>\n<li>5．变量使用不能超过作用域的范围。<br />\n【作用域】: 从定义变量的一行开始，一直到直接所属的大括号结束为止。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据类型转换\"><a class=\"anchor\" href=\"#数据类型转换\">#</a> 数据类型转换</h3>\n<ul>\n<li>\n<p>显式转换</p>\n</li>\n<li>\n<p>强制转换</p>\n</li>\n<li>\n<p>数据类型转换注意事项</p>\n<ol>\n<li>强制类型转换一般不推荐使用，因为有可能发生精度损失</li>\n<li>byte/short/char 这三种类型都可以发生数学运算，如例 1</li>\n<li>byte/short/char 这三种类型在运算的时候，都会被首先提升成为 int 类型，然后再计算。如例 2</li>\n</ol>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //例1：       </span><br><span class=\"line\">char shu = &#x27;A&#x27;;</span><br><span class=\"line\">system.out.println(shu + 1); //  66，也就是大写字母A被当做65进行处理</span><br><span class=\"line\"> </span><br><span class=\"line\"> //例2：</span><br><span class=\"line\"> byte num1 = 40; //注意：右侧的数值大小不能超过左侧的类型范围</span><br><span class=\"line\"> byte num2 = 50;</span><br><span class=\"line\"> //  byte + byte ---&gt;  int + int ---&gt;int</span><br><span class=\"line\"> int byte result1 = num1 + num2;</span><br><span class=\"line\"> System.out.println(result1);  //90</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<hr />\n<h1 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h1>\n<h3 id=\"算数运算符\"><a class=\"anchor\" href=\"#算数运算符\">#</a> 算数运算符</h3>\n<ul>\n<li>\n<p><img data-src=\"/images/2022-10-21-14-40-12.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>&quot;+&quot; 号的常用三种用法</p>\n<ol>\n<li>对于数值来说，那就是加法。</li>\n<li>对于字符 char 类型来说，在计算之前，char 会被提升成为 int，然后再计算。char 类型字符，和 int 类型数字，之间的对照关系表: ASCII、Unicode</li>\n<li>对于字符串 string (首字母大写，并不是关键字）来说，加号代表字符串连接操作。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str1 = &#x27;hello&#x27;;</span><br><span class=\"line\">System.out.println(str1 + &#x27;hello&#x27;); //  hellohello</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"自增自减运算符\"><a class=\"anchor\" href=\"#自增自减运算符\">#</a> 自增自减运算符</h3>\n<ul>\n<li>与 C 语中一样</li>\n</ul>\n<h3 id=\"赋值运算符\"><a class=\"anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h3>\n<ul>\n<li>与 C 语中一样</li>\n</ul>\n<h3 id=\"比较运算符\"><a class=\"anchor\" href=\"#比较运算符\">#</a> 比较运算符</h3>\n<ul>\n<li>与 C 语中一样</li>\n</ul>\n<h3 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h3>\n<ul>\n<li>与 C 语中一样</li>\n</ul>\n<h3 id=\"三元运算符\"><a class=\"anchor\" href=\"#三元运算符\">#</a> 三元运算符</h3>\n<ul>\n<li>与 C 语中一样</li>\n</ul>\n<hr />\n<h1 id=\"方法入门\"><a class=\"anchor\" href=\"#方法入门\">#</a> 方法入门</h1>\n<h3 id=\"方法的定义\"><a class=\"anchor\" href=\"#方法的定义\">#</a> 方法的定义</h3>\n<ul>\n<li>定义一个方法的格式<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public  static void 方法名称()&#123;</span><br><span class=\"line\">  方法体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>方法的调用<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 注意事项:</span><br><span class=\"line\">1.方法定义的先后顺序无所谓。</span><br><span class=\"line\">2．方法的定义不能产生嵌套包含关系。</span><br><span class=\"line\">3．方法定义好了之后，不会执行的。如果要想执行，一定要进行方法的【调用】。</span><br><span class=\"line\">*/</span><br><span class=\"line\">public  class Demo11Method&#123;</span><br><span class=\"line\">  public static void main(String[] args)&#123;</span><br><span class=\"line\">    //调用</span><br><span class=\"line\">    farmer();</span><br><span class=\"line\">    seller();</span><br><span class=\"line\">    cook();</span><br><span class=\"line\">    me();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public static void cook() &#123;</span><br><span class=\"line\">    system.out.println(&quot;洗菜&quot;);</span><br><span class=\"line\">    system.out.println(&quot;切菜&quot;);</span><br><span class=\"line\">    system.out.println(&quot;&quot;);</span><br><span class=\"line\">    system.out.println(&quot;&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public static void farmer() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public static void seller() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public static void me() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方法的三种调用\n<ol>\n<li>单独调用</li>\n<li>打印调用</li>\n<li>赋值调用</li>\n</ol>\n</li>\n</ul>\n<hr />\n</li>\n</ul>\n<h1 id=\"各种语句\"><a class=\"anchor\" href=\"#各种语句\">#</a> 各种语句</h1>\n<h3 id=\"if-语句\"><a class=\"anchor\" href=\"#if-语句\">#</a> if 语句</h3>\n<ul>\n<li>\n<p>单 IF 语句<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(关系表达式)  &#123;</span><br><span class=\"line\">  语句体1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>标准 IF 语句</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(关系表达式)  &#123;</span><br><span class=\"line\">  语句体1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;</span><br><span class=\"line\">  语句2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>扩展 if..else if 语句</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(关系表达式)  &#123;</span><br><span class=\"line\">  语句体1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if &#123;</span><br><span class=\"line\">  语句2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else  &#123;</span><br><span class=\"line\">  语句3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h3 id=\"swithch语句\"><a class=\"anchor\" href=\"#swithch语句\">#</a> swithch 语句</h3>\n<ul>\n<li>标准 switch 语句<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">switch(表达式)  &#123;</span><br><span class=\"line\">  case 常量值1：</span><br><span class=\"line\">    语句体1;</span><br><span class=\"line\">    break;</span><br><span class=\"line\">  case 常量值2:</span><br><span class=\"line\">    语句体2;break;</span><br><span class=\"line\">  ....</span><br><span class=\"line\">  default:</span><br><span class=\"line\">    语句体n;break;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>注意事项\n<ol>\n<li>switch 后面小括号当中只能是下列数据类型：基本数据类型:byte/short/char/int</li>\n<li>引用数据类型: String 字符串、enum 枚举</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"循环语句\"><a class=\"anchor\" href=\"#循环语句\">#</a> 循环语句</h3>\n<ul>\n<li>三种循环语句\n<ol>\n<li>for</li>\n<li>while</li>\n<li>do-while</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"使用scanner类\"><a class=\"anchor\" href=\"#使用scanner类\">#</a> 使用 scanner 类</h3>\n<ul>\n<li>Scanner 类的用法\n<ol>\n<li>首先需要构造一个 Scanner 类的对象，并且与标准输入流 System.in 关联<br />\n Scanner sc=new Scanner (<span class=\"exturl\" data-url=\"aHR0cDovL1N5c3RlbS5pbg==\">System.in</span>);</li>\n<li>调用 Scanner 类对象 sc 的方法从输入流中获取你需要的输入<br />\n int i=sc.nextInt ()；<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*如何从键盘获取不同类型的变量：需要使用Scanner类</span><br><span class=\"line\">Scanner类是java.util包中的一个类</span><br><span class=\"line\">具体实现步骤:</span><br><span class=\"line\">1.导包:import java.util.Scanner;</span><br><span class=\"line\">2.Scanner的实例化</span><br><span class=\"line\">*/</span><br><span class=\"line\">import java.util.Scanner;</span><br><span class=\"line\">public class ScannerTest &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Scanner scan = new Scanner(System.in); </span><br><span class=\"line\">        int num = scan.nextInt();</span><br><span class=\"line\">        System.out.println(num);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<hr />\n<h1 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h1>\n<h3 id=\"数组的概述\"><a class=\"anchor\" href=\"#数组的概述\">#</a> 数组的概述</h3>\n<ol>\n<li>\n<p>多个相同类型数据按一定顺序排列的集合，并使用一个名字命名，通过编号进行统一的管理</p>\n</li>\n<li>\n<p>数组的相关概念：</p>\n<ul>\n<li>数组名</li>\n<li>元素</li>\n<li>角标、下标、索引</li>\n<li>数组的长度：元素的个数</li>\n</ul>\n</li>\n<li>\n<p>数组的特点：</p>\n<ul>\n<li>数组属于引用类型的变量。数组的元素，既可以是基本数据类型，也可以是引用数据类型</li>\n<li>创建数组对象会在内存中开辟一整块<mark>连续</mark>的空间</li>\n<li>数组的长度一旦确定，就不能修改</li>\n<li>数组是有序排列的</li>\n</ul>\n</li>\n<li>\n<p>数组的分类：</p>\n<ul>\n<li>按照维数：一维数组、二维数组、三维数组……</li>\n<li>按照数组元素类型：基本数据类型元素的数组、引用类型元素的数组</li>\n</ul>\n</li>\n<li>\n<p>一维数组的使用</p>\n<ul>\n<li>一维数组的声明和初始化\n<ul>\n<li>代码案例 1_ArrayTest.java<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ArrayTest &#123;</span><br><span class=\"line\">  public static void main(String[] args) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //1. 一维数组的声明和初始化</span><br><span class=\"line\">    int num;\t//声明</span><br><span class=\"line\">    num = 10;\t//初始化</span><br><span class=\"line\">    int id = 1001;\t//声明 + 初始化</span><br><span class=\"line\">    </span><br><span class=\"line\">    int[] ids;\t//声明</span><br><span class=\"line\">    //1.1静态初始化:数组的初始化和数组元素的赋值操作同时进行</span><br><span class=\"line\">    ids = new int[]&#123;1001,1002,1003,1004&#125;;\t</span><br><span class=\"line\">    //1.2动态初始化:数组的初始化和数组元素的赋值操作分开进行</span><br><span class=\"line\">    String[] names = new String[5]; </span><br><span class=\"line\">    </span><br><span class=\"line\">    //错误的写法：</span><br><span class=\"line\">//\t\tint[] arr1 = new int[];\t//未赋值、未指明长度</span><br><span class=\"line\">//\t\tint[5] arr2 = new int[5];</span><br><span class=\"line\">//\t\tint[] arr3 = new int[3]&#123;1,2,3&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //也是正确的写法：</span><br><span class=\"line\">    int[] arr7 = &#123;1,2,3,5,4&#125;;//类型推断</span><br><span class=\"line\">    </span><br><span class=\"line\">    /*总结：数组一旦初始化完成，其长度就确定了。</span><br><span class=\"line\">    */</span><br><span class=\"line\">    </span><br><span class=\"line\">    //2.如何调用数组的指定位置的元素：通过角标的方式调用。</span><br><span class=\"line\">    //数组的角标(或索引)从0开始的，到数组的长度-1结束</span><br><span class=\"line\">    names[0] = &quot;张郃&quot;;</span><br><span class=\"line\">    names[1] = &quot;王陵&quot;;</span><br><span class=\"line\">    names[2] = &quot;张学良&quot;;</span><br><span class=\"line\">    names[3] = &quot;王传志&quot;;\t//charAt(0)</span><br><span class=\"line\">    names[4] = &quot;李峰&quot;;</span><br><span class=\"line\">//\t\tnames[5] = &quot;周礼&quot;;\t//如果数组超过角标会通过编译，运行失败。</span><br><span class=\"line\">    </span><br><span class=\"line\">    //3.如何获取数组的长度</span><br><span class=\"line\">    //属性：length</span><br><span class=\"line\">    System.out.println(names.length);\t//5</span><br><span class=\"line\">    System.out.println(ids.length);\t//4</span><br><span class=\"line\">    </span><br><span class=\"line\">    //4.如何遍历数组</span><br><span class=\"line\">//\t\tSystem.out.println(names[0]);</span><br><span class=\"line\">//\t\tSystem.out.println(names[1]);</span><br><span class=\"line\">//\t\tSystem.out.println(names[2]);</span><br><span class=\"line\">//\t\tSystem.out.println(names[3]);</span><br><span class=\"line\">//\t\tSystem.out.println(names[4]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    for(int i = 0;i &lt; names.length;i++)&#123;</span><br><span class=\"line\">      System.out.println(names[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>如何调用数组的指定位置的元素</li>\n<li>如何获取数组的长度</li>\n<li>如何遍历数组</li>\n<li>数组的内存解析：见 ArrayTest1.java</li>\n<li>数组元素的默认初始化值：见 ArrayTest1.java\n<ul>\n<li>代码案例 2：ArrayTest1.java<br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/  数组元素是整形：<span class=\"number\">0</span></span><br><span class=\"line\">  \t数组元素是浮点型：<span class=\"number\">0.0</span></span><br><span class=\"line\">  \t数组元素是<span class=\"type\">char</span>型：<span class=\"number\">0</span>或<span class=\"string\">&#x27;\\u0000&#x27;</span>，而非<span class=\"string\">&#x27;0&#x27;</span></span><br><span class=\"line\">  \t数组元素是<span class=\"type\">boolean</span>型:<span class=\"literal\">false</span></span><br><span class=\"line\">  \t数组元素是引用数据类型：<span class=\"literal\">null</span> </span><br><span class=\"line\">*/</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayTest1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//5.数组元素的默认初始化值</span></span><br><span class=\"line\">      <span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">4</span>];</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class=\"line\">        System.out.println(arr[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;*****************&quot;</span>);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"type\">short</span>[] arr1 = <span class=\"keyword\">new</span> <span class=\"title class_\">short</span>[<span class=\"number\">4</span>];</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; arr1.length;i++)&#123;</span><br><span class=\"line\">        System.out.println(arr1[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;*****************&quot;</span>);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"type\">float</span>[] arr2 = <span class=\"keyword\">new</span> <span class=\"title class_\">float</span>[<span class=\"number\">5</span>]; </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; arr2.length;i++)&#123;</span><br><span class=\"line\">        System.out.println(arr2[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;*****************&quot;</span>);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"type\">char</span>[] arr3 = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">5</span>]; </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; arr3.length;i++)&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;----&quot;</span> + arr3[i] + <span class=\"string\">&quot;****&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(arr3[<span class=\"number\">0</span>] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;你好！&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;*****************&quot;</span>);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"type\">boolean</span>[] arr4 = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">      System.out.println(arr4[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      </span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;*****************&quot;</span>);</span><br><span class=\"line\">      String[] arr5 = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">      System.out.println(arr5[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      <span class=\"comment\">//验证</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(arr5[<span class=\"number\">0</span>] == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;北京天气好差！&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"内存\"><a class=\"anchor\" href=\"#内存\">#</a> 内存</h3>\n<ul>\n<li>一维数组内存的简化结构</li>\n</ul>\n<p><img data-src=\"/images/2022-10-21-14-51-34.png\" alt=\"\" /></p>\n<ul>\n<li>一维数组的内存解析<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">String[] arr1 = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">4</span>];</span><br><span class=\"line\">arr1[<span class=\"number\">1</span>] = “刘德华”;</span><br><span class=\"line\">arr1[<span class=\"number\">2</span>] = “张学友”;</span><br><span class=\"line\">arr1 = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">System.out.println(arr1[<span class=\"number\">1</span>]);<span class=\"comment\">//null</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img data-src=\"/images/%20!%5B%5D(/images/2022-08-27-17-38-15.png).png\" alt=\"\" /></p>\n<h3 id=\"二维数组\"><a class=\"anchor\" href=\"#二维数组\">#</a> 二维数组</h3>\n<ul>\n<li>理解\n<ol>\n<li>对于二维数组的理解，我们可以看成是一维数组 array1 又作为另一个一维数组 array2 的元素而存在。</li>\n<li>其实，从数组底层的运行机制来看，其实没有多维数组。</li>\n</ol>\n</li>\n<li>二维数组的使用：\n<ol>\n<li>二维数组的初始化，代码案例 ——ArrayTest2.java</li>\n<li>如何调用数组的指定位置的元素</li>\n<li>如何获取数组的长度</li>\n<li>如何遍历数组</li>\n<li>数组元素的默认初始化值：见 ArrayTest3.java<br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayTest2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//1.二维数组的声明和初始化</span></span><br><span class=\"line\">      <span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">      <span class=\"comment\">//静态初始化</span></span><br><span class=\"line\">      <span class=\"type\">int</span>[][] arr1 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[][]&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;,&#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;&#125;;</span><br><span class=\"line\">      <span class=\"comment\">//动态初始化1</span></span><br><span class=\"line\">      String[][] arr2 = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">3</span>][<span class=\"number\">2</span>];</span><br><span class=\"line\">      <span class=\"comment\">//动态初始化2</span></span><br><span class=\"line\">      String[][] arr3 = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">3</span>][];</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//错误的情况</span></span><br><span class=\"line\">  <span class=\"comment\">//\t\tString[][] arr4 = new String[][];</span></span><br><span class=\"line\">  <span class=\"comment\">//\t\tString[][] arr5 = new String[][4];</span></span><br><span class=\"line\">  <span class=\"comment\">//\t\tString[][] arr6 = new String[4][3]&#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;,&#123;7,8,9&#125;&#125;;</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//正确的情况：</span></span><br><span class=\"line\">      <span class=\"type\">int</span> arr4[][] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[][]&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">12</span>,<span class=\"number\">6</span>&#125;,&#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;&#125;;</span><br><span class=\"line\">      <span class=\"type\">int</span>[] arr5[] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[][]&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;,&#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;&#125;;</span><br><span class=\"line\">      <span class=\"type\">int</span>[][] arr6 = &#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;,&#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;&#125;;\t\t</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//2.如何调用数组的指定位置的元素</span></span><br><span class=\"line\">      System.out.println(arr1[<span class=\"number\">0</span>][<span class=\"number\">1</span>]);\t<span class=\"comment\">//2</span></span><br><span class=\"line\">      System.out.println(arr2[<span class=\"number\">1</span>][<span class=\"number\">1</span>]);\t<span class=\"comment\">//null</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      arr3[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">4</span>];\t<span class=\"comment\">//定义arr3的[1]为长度为4的字符数组</span></span><br><span class=\"line\">      System.out.println(arr3[<span class=\"number\">1</span>][<span class=\"number\">0</span>]);\t<span class=\"comment\">//没有上句，会报错</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//3.获取数组的长度</span></span><br><span class=\"line\">      System.out.println(arr4.length);\t<span class=\"comment\">//3</span></span><br><span class=\"line\">      System.out.println(arr4[<span class=\"number\">0</span>].length);\t<span class=\"comment\">//3</span></span><br><span class=\"line\">      System.out.println(arr4[<span class=\"number\">1</span>].length);\t<span class=\"comment\">//4</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//4.如何遍历二维数组</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; arr4.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;j &lt; arr4[i].length;j++)&#123;</span><br><span class=\"line\">          System.out.print(arr4[i][j] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"数组的内存解析见arraytest3java\"><a class=\"anchor\" href=\"#数组的内存解析见arraytest3java\">#</a> 数组的内存解析：见 ArrayTest3.java</h3>\n<ul>\n<li>\n<p>规定：</p>\n<ol>\n<li>二维数组分为外层数组的元素，内层数组的元素</li>\n<li>int[][] arr = new int[4][3];</li>\n<li>外层元素:arr [0],arr [1] 等</li>\n<li>内层元素:arr [0][0],arr [1][2] 等</li>\n</ol>\n</li>\n<li>\n<p>数组元素的默认初始化值</p>\n<ol>\n<li>针对于初始化方式一：比如：int [][] arr = new int [4][3];</li>\n<li>外层元素的初始化值为：地址值</li>\n<li>内层元素的初始化值为：与一维数组初始化情况相同</li>\n</ol>\n<blockquote>\n<blockquote>\n<blockquote></blockquote>\n</blockquote>\n</blockquote>\n<ol>\n<li>针对于初始化方式而二：比如：int [][] arr = new int [4][];</li>\n<li>外层元素的初始化值为：null，因为一维数组是引用类型</li>\n<li>内层元素的初始化值为：不能调用，否则报错。<br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayTest3</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span>[][] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">4</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\">    System.out.println(arr[<span class=\"number\">0</span>]);\t<span class=\"comment\">//[I@15db9742</span></span><br><span class=\"line\">    System.out.println(arr[<span class=\"number\">0</span>][<span class=\"number\">0</span>]);\t<span class=\"comment\">//0</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(arr);\t//ArrayTest3.java</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;***********************&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">float</span>[][] arr1 = <span class=\"keyword\">new</span> <span class=\"title class_\">float</span>[<span class=\"number\">4</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\">    System.out.println(arr1[<span class=\"number\">0</span>]);\t<span class=\"comment\">//地址值</span></span><br><span class=\"line\">    System.out.println(arr1[<span class=\"number\">0</span>][<span class=\"number\">0</span>]);\t<span class=\"comment\">//0.0</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;***********************&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    String[][] arr2 = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">4</span>][<span class=\"number\">2</span>];</span><br><span class=\"line\">    System.out.println(arr2[<span class=\"number\">1</span>]);\t<span class=\"comment\">//地址值</span></span><br><span class=\"line\">    System.out.println(arr2[<span class=\"number\">1</span>][<span class=\"number\">1</span>]);\t<span class=\"comment\">//null</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;*********************&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">double</span>[][] arr3 = <span class=\"keyword\">new</span> <span class=\"title class_\">double</span>[<span class=\"number\">4</span>][];</span><br><span class=\"line\">    System.out.println(arr3[<span class=\"number\">1</span>]);\t<span class=\"comment\">//null</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(arr3[1][0]);\t//报错</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>二维数组的内存解析</p>\n</li>\n</ul>\n<p><img data-src=\"/images/2022-10-21-13-08-30.png\" alt=\"\" /></p>\n<h3 id=\"数组元素的排序算法\"><a class=\"anchor\" href=\"#数组元素的排序算法\">#</a> 数组元素的排序算法</h3>\n<ul>\n<li>衡量排序算法的优劣\n<ol>\n<li>时间复杂度：分析关键字的比较次数和记录的移动次数</li>\n<li>空间复杂度：分析排序算法中需要多少辅助内存</li>\n<li>稳定性若两个记录 A 和 B 的关键字值相等，但排序后 A、B 的先后次序保持不变，则称这种排序算法是稳定的。</li>\n</ol>\n</li>\n<li>排序算法分类\n<ol>\n<li>内部排序：整个排序过程不需要借助于外部存储器（如磁盘等），所有排序操作都在内存中完成。</li>\n<li>外部排序：参与排序的数据非常多，数据量非常大，计算机无法把整个排序过程放在内存中完成，必须借助于外部存储器（如磁盘）。<br />\n外部排序最常见的是多路归并排序。可以认为外部排序是由多次内部排序组成。</li>\n</ol>\n</li>\n<li>排序算法性能对比</li>\n</ul>\n<p><img data-src=\"/images/2022-10-21-13-08-01.png\" alt=\"\" /></p>\n<h3 id=\"十大内部排序算法\"><a class=\"anchor\" href=\"#十大内部排序算法\">#</a> 十大内部排序算法</h3>\n<ul>\n<li>选择排序\n<ul>\n<li>直接选择排序、堆排序</li>\n</ul>\n</li>\n<li>交换排序\n<ul>\n<li>冒泡排序、快速排序</li>\n</ul>\n</li>\n<li>插入排序\n<ul>\n<li>直接插入排序、折半插入排序、Shell 排序</li>\n</ul>\n</li>\n<li>归并排序</li>\n<li>桶式排序</li>\n<li>基数排序</li>\n</ul>\n<h3 id=\"数组中常见的算法\"><a class=\"anchor\" href=\"#数组中常见的算法\">#</a> 数组中常见的算法</h3>\n<ul>\n<li>\n<p>复制、反转</p>\n</li>\n<li>\n<p>二分法查找<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayTest3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//二分法查找：</span></span><br><span class=\"line\">      <span class=\"comment\">//前提：所要查找的数组必须有序</span></span><br><span class=\"line\">      <span class=\"type\">int</span>[] arr2 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;-<span class=\"number\">98</span>,-<span class=\"number\">34</span>,<span class=\"number\">2</span>,<span class=\"number\">34</span>,<span class=\"number\">54</span>,<span class=\"number\">66</span>,<span class=\"number\">79</span>,<span class=\"number\">105</span>,<span class=\"number\">210</span>,<span class=\"number\">333</span>&#125;;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">dest1</span> <span class=\"operator\">=</span> -<span class=\"number\">34</span>;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">head</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t<span class=\"comment\">//初始的首索引</span></span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> arr2.length - <span class=\"number\">1</span>;\t<span class=\"comment\">//初始的末索引</span></span><br><span class=\"line\">      <span class=\"type\">boolean</span> <span class=\"variable\">isFlag1</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(head &lt;= end)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">middle</span> <span class=\"operator\">=</span> (head + end)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dest1 == arr2[middle])&#123;</span><br><span class=\"line\">          System.out.println(<span class=\"string\">&quot;找到了指定元素，位置为：&quot;</span> + middle);</span><br><span class=\"line\">          isFlag1 = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr2[middle] &gt; dest1)&#123;</span><br><span class=\"line\">          end = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;\t<span class=\"comment\">//arr2[middle] &lt; dest1</span></span><br><span class=\"line\">          head = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;\t</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(isFlag1)&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;很遗憾，没找到！&quot;</span>);</span><br><span class=\"line\">      &#125;\t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>冒泡排序</p>\n<p><img data-src=\"/images/1652ba31ff3ee377506665fa442de80d.gif\" alt=\"\" /><br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 数组的冒泡排序的实现</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BubbleSortTest</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">43</span>,<span class=\"number\">32</span>,<span class=\"number\">76</span>,<span class=\"number\">92</span>,-<span class=\"number\">65</span>,<span class=\"number\">85</span>,<span class=\"number\">71</span>,-<span class=\"number\">42</span>&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//冒泡排序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; arr.length - <span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;j &lt; arr.length - <span class=\"number\">1</span> - i;j++)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[j] &gt; arr[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">          <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[j];</span><br><span class=\"line\">          arr[j] = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">          arr[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class=\"line\">      System.out.print(arr[i] + <span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>快速排序</p>\n</li>\n</ul>\n<h3 id=\"arrays-工具类的使用\"><a class=\"anchor\" href=\"#arrays-工具类的使用\">#</a> Arrays 工具类的使用</h3>\n<p>java.util.Arrays 类即为操作数组的工具类，包含了用来操作数组（比如排序和搜索）的各种方法。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">boolean equals(int[] a,int[] b)</td>\n<td style=\"text-align:center\">判断两个数组是否相等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">String toString(int[] a)</td>\n<td style=\"text-align:center\">输出数组信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">void fill(int[] a,int val)</td>\n<td style=\"text-align:center\">将指定值填充到数组之中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">void sort(int[] a)</td>\n<td style=\"text-align:center\">对数组进行排序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int binarySearch(int[] a,int key)</td>\n<td style=\"text-align:center\">对排序后的数组进行二分法检索指定的值</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Arrays 代码案例<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* java.util.Arrays:作数组的工具类，包含了用来操作数组（比如排序和搜索）的各种方法。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayTest4</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//1.boolean equals(int[] a,int[] b)判断两个数组是否相等。</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr1 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr2 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">isEquals</span> <span class=\"operator\">=</span> Arrays.equals(arr1, arr2);</span><br><span class=\"line\">    System.out.println(isEquals);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//2.String toString(int[] a)输出数组信息。</span></span><br><span class=\"line\">    System.out.println(Arrays.toString(arr1));\t\t</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//3.void fill(int[] a,int val)将指定值填充到数组之中。</span></span><br><span class=\"line\">    Arrays.fill(arr1, <span class=\"number\">10</span>);</span><br><span class=\"line\">    System.out.println(Arrays.toString(arr1));\t\t</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//4.void sort(int[] a)对数组进行排序。</span></span><br><span class=\"line\">    Arrays.sort(arr2);</span><br><span class=\"line\">    System.out.println(Arrays.toString(arr2));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//5.int binarySearch(int[] a,int key)对排序后的数组进行二分法检索指定的值。</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr3 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">43</span>,<span class=\"number\">32</span>,<span class=\"number\">76</span>,<span class=\"number\">92</span>,-<span class=\"number\">65</span>,<span class=\"number\">85</span>,<span class=\"number\">71</span>,-<span class=\"number\">42</span>&#125;; </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> Arrays.binarySearch(arr3, <span class=\"number\">210</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      System.out.println(index);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      System.err.println(<span class=\"string\">&quot;未找到。&quot;</span>);</span><br><span class=\"line\">    &#125;\t\t</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"数组使用中的常见异常\"><a class=\"anchor\" href=\"#数组使用中的常见异常\">#</a> 数组使用中的常见异常</h3>\n<ol>\n<li>数组角标越界的异常：ArrayIndexOutOfBoundsException</li>\n<li>空指针异常：NullPointerException<br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 数组中的常见异常：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.数组角标越界的异常:ArrayIndexOutOfBoundsException</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 2.空指针异常:NullPointerException</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayExceptionTest</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//1.数组角标越界的异常:ArrayIndexOutOfBoundsException</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//错误1：</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt;= arr.length;i++)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(arr[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//错误2：</span></span><br><span class=\"line\">\t\tSystem.out.println(arr[-<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//错误3</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//2.空指针异常:NullPointerException</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//情况一:</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span>[] arr2= <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">\t\tarr2 = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\tSystem.out.println(arr2[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t<span class=\"comment\">//情况二:</span></span><br><span class=\"line\">     <span class=\"type\">int</span>[][] arr2 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">4</span>][];</span><br><span class=\"line\">\t\tSystem.out.println(arr2[<span class=\"number\">0</span>][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//情况三:</span></span><br><span class=\"line\">\tString[] arr3 = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;AA&quot;</span>,<span class=\"string\">&quot;QQ&quot;</span>,<span class=\"string\">&quot;YY&quot;</span>,<span class=\"string\">&quot;XX&quot;</span>,<span class=\"string\">&quot;TT&quot;</span>,<span class=\"string\">&quot;KK&quot;</span>&#125;;</span><br><span class=\"line\">\t  arr3[<span class=\"number\">0</span>] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\tSystem.out.println(arr3[<span class=\"number\">0</span>].toString());\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr />\n<h1 id=\"面向对象上\"><a class=\"anchor\" href=\"#面向对象上\">#</a> 面向对象 (上)</h1>\n<h3 id=\"面向过程pop与面向对象oop\"><a class=\"anchor\" href=\"#面向过程pop与面向对象oop\">#</a> 面向过程 (POP) 与面向对象 (OOP)</h3>\n<p>何谓 “面向对象” 的编程思想？<br />\n首先解释一下 “思想”。<br />\n先问你个问题：你想做个怎样的人？<br />\n可能你会回答：我想做个好人，孝敬父母，尊重长辈，关爱亲朋…<br />\n 你看，这就是思想。这是你做人的思想，或者说，是你做人的原则。做人有做人的原则，编程也有编程的原则。这些编程的原则呢，就是编程思想。</p>\n<ul>\n<li><mark>学习面向对象内容的三条主线</mark>\n<ol>\n<li>Java 类及类的成员：属性、方法、构造器、代码块、内部类</li>\n<li>面向对象的三大特征：封装、继承、多态性、(抽象性)</li>\n<li>其它关键字：this、super、static、final、abstract、interface、package、import 等</li>\n</ol>\n</li>\n<li>人把大象装进冰箱<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"number\">1.</span>面向过程:强调的是功能行为，以函数为最小单位，考虑怎么做。</span><br><span class=\"line\">* </span><br><span class=\"line\">* ① 打开冰箱</span><br><span class=\"line\">* ② 把大象装进冰箱</span><br><span class=\"line\">* ③ 把冰箱门关住 </span><br><span class=\"line\">* </span><br><span class=\"line\">* <span class=\"number\">2.</span>面向对象:强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。</span><br><span class=\"line\">* 人&#123;</span><br><span class=\"line\">* \t\t打开(冰箱)&#123;</span><br><span class=\"line\">* \t\t\t冰箱.开门();</span><br><span class=\"line\">* \t\t&#125;操作(大象)&#123;</span><br><span class=\"line\">* \t\t\t大象.进入(冰箱);</span><br><span class=\"line\">* \t\t&#125;关闭(冰箱)&#123;</span><br><span class=\"line\">* \t\t\t 冰箱.关门();     </span><br><span class=\"line\">* \t\t&#125;</span><br><span class=\"line\">* &#125;</span><br><span class=\"line\">* </span><br><span class=\"line\">* 冰箱&#123;</span><br><span class=\"line\">* \t\t开门()&#123;</span><br><span class=\"line\">* \t\t&#125;  </span><br><span class=\"line\">* \t\t关门()&#123;</span><br><span class=\"line\">* \t\t&#125;</span><br><span class=\"line\">* &#125;</span><br><span class=\"line\">* </span><br><span class=\"line\">* 大象&#123;</span><br><span class=\"line\">* \t\t进入(冰箱)&#123;</span><br><span class=\"line\">* \t\t&#125;</span><br><span class=\"line\">* &#125;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"类和对象\"><a class=\"anchor\" href=\"#类和对象\">#</a> 类和对象</h3>\n<ul>\n<li>面向对象的两个要素\n<ol>\n<li>类：对一类事物的描述，是抽象的、概念上的定义</li>\n<li>对象：是实际存在的该类事物的每个个体，因而也称为实\t例 (instance)</li>\n</ol>\n</li>\n</ul>\n<p>可以理解为：类 = 抽象概念的人；对象 = 实实在在的某个人，面向对象程序设计的重点是类的设计；设计类，其实就是设计类的成员。</p>\n<h3 id=\"java-类及类的成员\"><a class=\"anchor\" href=\"#java-类及类的成员\">#</a> Java 类及类的成员</h3>\n<p>现实世界的生物体，大到鲸鱼，小到蚂蚁，都是由最基本的细胞构成的。同理，Java 代码世界是由诸多个不同功能的类构成的。</p>\n<p>现实生物世界中的细胞又是由什么构成的呢？细胞核、细胞质、… 那么，Java 中用类 class 来描述事物也是如此。常见的类的成员有：</p>\n<ul>\n<li>属性：对应类中的成员变量</li>\n<li>行为：对应类中的成员方法</li>\n</ul>\n<h3 id=\"类与对象的创建及使用\"><a class=\"anchor\" href=\"#类与对象的创建及使用\">#</a> 类与对象的创建及使用</h3>\n<ul>\n<li>\n<p>设计类、其实就是设计类的成员</p>\n<ol>\n<li>Field = 属性 = 成员变量 = 域、字段</li>\n<li>Method = (成员) 方法 = 函数</li>\n<li>创建类 = 类的实例化 = 实例化类</li>\n</ol>\n</li>\n<li>\n<p><mark>类和对象的使用 (面向对象思想落地的实现)</mark></p>\n<ol>\n<li>创建类，设计类的成员</li>\n<li>创建类的对象</li>\n<li>通过 “对象。属性” 或 “对象。方法” 调用对象的结构</li>\n</ol>\n</li>\n<li>\n<p>如果创建类一个类的多个对象，则每个对象都独立的拥有一套类的属性。(非 static 的) \t  意味着：如果我们修改一个对象的属性 a，则不影响另外一个对象属性 a 的值。<br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PersonTest</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//2.创建 Person 类的对象</span></span><br><span class=\"line\">    <span class=\"comment\">//创建对象语法：类名对象名= new 类名();</span></span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">p1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">    <span class=\"comment\">//Scanner scan = new Scanner(System.in);</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//调用类的结构：属性、方法</span></span><br><span class=\"line\">    <span class=\"comment\">//调用属性:“对象.属性”</span></span><br><span class=\"line\">    p1.name = <span class=\"string\">&quot;Tom&quot;</span>;</span><br><span class=\"line\">    p1.age = <span class=\"number\">25</span>;</span><br><span class=\"line\">    p1.isMale = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    System.out.println(p1.name);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//调用方法:“对象.方法”</span></span><br><span class=\"line\">    p1.eat();</span><br><span class=\"line\">    p1.sleep();</span><br><span class=\"line\">    p1.talk(<span class=\"string\">&quot;chinese&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//**********************</span></span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">p2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">    System.out.println(p2.name); <span class=\"comment\">//null</span></span><br><span class=\"line\">    System.out.println(p2.isMale);</span><br><span class=\"line\">    <span class=\"comment\">//**********************</span></span><br><span class=\"line\">    <span class=\"comment\">//将 p1 变量保存的对象地址值赋给 p3,导致 p1 和 p3 指向了堆空间中的一个对象实体。</span></span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">p3</span> <span class=\"operator\">=</span> p1;</span><br><span class=\"line\">    System.out.println(p3.name);</span><br><span class=\"line\">    </span><br><span class=\"line\">    p3.age = <span class=\"number\">10</span>;</span><br><span class=\"line\">    System.out.println(p1.age); <span class=\"comment\">//10</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 类的语法格式：</span></span><br><span class=\"line\"><span class=\"comment\">* 修饰符 class 类名&#123;</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t属性声明;</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t方法声明;</span></span><br><span class=\"line\"><span class=\"comment\">* &#125;</span></span><br><span class=\"line\"><span class=\"comment\">* 说明：修饰符 public：类可以被任意访问类的正文要用&#123;  &#125;括起来</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">//1.创建类，设计类的成员</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//属性:对应类中的成员变量</span></span><br><span class=\"line\">  String name;</span><br><span class=\"line\">  <span class=\"type\">int</span> age;</span><br><span class=\"line\">  <span class=\"type\">boolean</span> isMale;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//方法:对应类中的成员方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;吃饭&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sleep</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;睡觉&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">talk</span><span class=\"params\">(String language)</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;人可以说话，使用的是：&quot;</span> + language);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h3 id=\"对象的创建和使用内存解析\"><a class=\"anchor\" href=\"#对象的创建和使用内存解析\">#</a> 对象的创建和使用：内存解析</h3>\n<p><img data-src=\"/images/2022-10-21-13-12-55.png\" alt=\"\" /><br />\n堆（Heap），此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在 Java 虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配。<br />\n通常所说的栈（Stack），是指虚拟机栈。虚拟机栈用于存储局部变量等。局部变量表存放了编译期可知长度的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，它不等同于对象本身，是对象在堆内存的首地址）。方法执行完，自动释放。<br />\n方法区（MethodArea），用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>\n<ul>\n<li>\n<p>案例 1<br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person p1= newPerson();</span><br><span class=\"line\">p1.name = <span class=\"string\">&quot;Tom&quot;</span>;</span><br><span class=\"line\">p1.isMale = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">p2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">sysout(p2.name);<span class=\"comment\">//null</span></span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">p3</span> <span class=\"operator\">=</span> p1;</span><br><span class=\"line\">p3.age = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\n<img data-src=\"/images/2022-10-21-13-13-38.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>案例 2</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person p1= newPerson();</span><br><span class=\"line\">p1.name = <span class=\"string\">&quot;胡利民&quot;</span>;</span><br><span class=\"line\">p1.age = <span class=\"number\">23</span>;</span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">p2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">p2.age = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure><br />\n<img data-src=\"/images/2022-10-21-13-14-05.png\" alt=\"\" /></p>\n</li>\n</ul>\n<h3 id=\"类的成员之一属性\"><a class=\"anchor\" href=\"#类的成员之一属性\">#</a> 类的成员之一：属性</h3>\n<ul>\n<li>\n<p>类中属性属性 (成员变量)\tvs\t局部变量</p>\n<ul>\n<li>\n<p>相同点：</p>\n<ol>\n<li>定义变量的格式：数据类型 变量名 = 变量值</li>\n<li>先声明，后使用\t1.</li>\n<li>变量都有其对应的作用域</li>\n</ol>\n</li>\n<li>\n<p>不同点：</p>\n<ol>\n<li>\n<p><strong>在类中声明的位置不同：</strong><br />\n属性：直接定义在类的一对 {} 内<br />\n局部变量：声明在方法内、方法形参、构造器形参、构造器内部的变量</p>\n</li>\n<li>\n<p><strong>关于权限修饰符的不同：</strong><br />\n属性：可以在声明属性时，指明其权限，使用权限修饰符。<br />\n常用的权限修饰符:private、public、缺省、protected<br />\n 目前声明属性时，都使用缺省即可。<br />\n局部变量：不可以使用权限修饰符。</p>\n</li>\n<li>\n<p><strong>默认初始化值的情况:</strong><br />\n 属性：类的属性，根据其类型，都有默认初始化值。<br />\n整型 (byte、short、int、long):0<br />\n 浮点型 (float、double):0.0<br />\n 字符型 (char):0 (或‘\\u0000’)<br />\n 布尔型 (boolean):false<br />\n 引用数据类型 (类、数组、接口):null<br />\n 局部变量：没有默认初始化值<br />\n意味着：在调用局部变量之前，一定要显式赋值。<br />\n特别地：形参在调用时，赋值即可。例，45 行</p>\n</li>\n<li>\n<p><strong>在内存中加载的位置，亦各不相同</strong><br />\n属性：加载到堆空间中 (非 static)<br />\n 局部变量：加载到栈空间</p>\n</li>\n</ol>\n</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserTest</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">u1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">    System.out.println(u1.name);</span><br><span class=\"line\">    System.out.println(u1.age);</span><br><span class=\"line\">    System.out.println(u1.isMale);</span><br><span class=\"line\">    </span><br><span class=\"line\">    u1.talk(<span class=\"string\">&quot;俄语&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//属性(或成员变量)</span></span><br><span class=\"line\">  String name;\t<span class=\"comment\">//不加 private 即为缺省</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> age;\t<span class=\"comment\">//不加 public 即为缺省</span></span><br><span class=\"line\">  <span class=\"type\">boolean</span> isMale;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">talk</span><span class=\"params\">(String language)</span>&#123;<span class=\"comment\">//language:形参，也是局部变量</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;我们使用&quot;</span> + language + <span class=\"string\">&quot;进行交流。&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">food</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;石头饼&quot;</span>;\t<span class=\"comment\">//石头饼:局部变量</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;北方人喜欢吃:&quot;</span> + food);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h3 id=\"类的成员之二方法\"><a class=\"anchor\" href=\"#类的成员之二方法\">#</a> 类的成员之二：方法</h3>\n<h5 id=\"类中方法的声明和使用\"><a class=\"anchor\" href=\"#类中方法的声明和使用\">#</a> 类中方法的声明和使用</h5>\n<ul>\n<li>\n<p>类中方法的声明和使用<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 类中方法的声明和使用</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">* 方法：描述类应该具有的功能。</span></span><br><span class=\"line\"><span class=\"comment\">* 比如：Math类：sqrt()\\random() \\...</span></span><br><span class=\"line\"><span class=\"comment\">*     Scanner类：nextXxx() ...</span></span><br><span class=\"line\"><span class=\"comment\">*     Arrays类：sort() \\ binarySearch() \\ toString() \\ equals() \\ ...</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">* 1.举例：</span></span><br><span class=\"line\"><span class=\"comment\">* public void eat()&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">* public void sleep(int hour)&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">* public String getName()&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">* public String getNation(String nation)&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">* 2. 方法的声明：权限修饰符  返回值类型  方法名(形参列表)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t\t\t\t方法体</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t\t  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*   注意：static、final、abstract 来修饰的方法，后面再讲。</span></span><br><span class=\"line\"><span class=\"comment\">*   </span></span><br><span class=\"line\"><span class=\"comment\">* 3. 说明：</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t3.1 关于权限修饰符：默认方法的权限修饰符先都使用public</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t\tJava规定的4种权限修饰符：private、public、缺省、protected  --&gt;封装性再细说</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">* \t\t3.2 返回值类型： 有返回值  vs 没有返回值</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t\t3.2.1  如果方法有返回值，则必须在方法声明时，指定返回值的类型。同时，方法中，需要使用</span></span><br><span class=\"line\"><span class=\"comment\">*                return关键字来返回指定类型的变量或常量：“return 数据”。</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t\t\t  如果方法没有返回值，则方法声明时，使用void来表示。通常，没有返回值的方法中，就不需要</span></span><br><span class=\"line\"><span class=\"comment\">*               使用return.但是，如果使用的话，只能“return;”表示结束此方法的意思。</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">* \t\t\t3.2.2 我们定义方法该不该有返回值？</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t\t\t① 题目要求</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t\t\t② 凭经验：具体问题具体分析</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">*      3.3 方法名：属于标识符，遵循标识符的规则和规范，“见名知意”</span></span><br><span class=\"line\"><span class=\"comment\">*      3.4 形参列表:方法名可以声明0个、1个，或多个形参。</span></span><br><span class=\"line\"><span class=\"comment\">*      \t3.4.1 格式:数据类型1 形参1，数据类型2 形参2,...</span></span><br><span class=\"line\"><span class=\"comment\">*      </span></span><br><span class=\"line\"><span class=\"comment\">*      \t3.4.2 我们定义方法时，该不该定义形参？</span></span><br><span class=\"line\"><span class=\"comment\">*      \t\t① 题目要求</span></span><br><span class=\"line\"><span class=\"comment\">*      \t\t② 凭经验，具体问题具体分析</span></span><br><span class=\"line\"><span class=\"comment\">*      3.5 方法体:方法功能的体现。</span></span><br><span class=\"line\"><span class=\"comment\">*  4. return关键字的使用：</span></span><br><span class=\"line\"><span class=\"comment\">*  \t1.使用范围:使用在方法体中</span></span><br><span class=\"line\"><span class=\"comment\">*  \t2.作业:① 结束方法</span></span><br><span class=\"line\"><span class=\"comment\">*  \t\t  ② 针对于有返回值类型的方法，使用&quot;return 数据&quot;方法返回所要的数据。</span></span><br><span class=\"line\"><span class=\"comment\">*  \t3.注意点:return关键字后不可声明执行语句。</span></span><br><span class=\"line\"><span class=\"comment\">*  5. 方法的使用中，可以调用当前类的属性或方法。</span></span><br><span class=\"line\"><span class=\"comment\">*  \t\t特殊的:方法A中又调用了方法A:递归方法。</span></span><br><span class=\"line\"><span class=\"comment\">*  \t方法中不能定义其他方法。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomerTest</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">Customer</span> <span class=\"variable\">cust1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Customer</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    cust1.eat();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//测试形参是否需要设置的问题</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tint[] arr = new int[]&#123;3,4,5,2,5&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tcust1.sort();</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    cust1.sleep(<span class=\"number\">8</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//客户类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Customer</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//属性</span></span><br><span class=\"line\">  String name;</span><br><span class=\"line\">  <span class=\"type\">int</span> age;</span><br><span class=\"line\">  <span class=\"type\">boolean</span> isMale;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;客户吃饭&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">//return后不可以声明表达式</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(&quot;hello&quot;);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sleep</span><span class=\"params\">(<span class=\"type\">int</span> hour)</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;休息了&quot;</span> + hour + <span class=\"string\">&quot;个小时&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    eat();</span><br><span class=\"line\"><span class=\"comment\">//\t\tsleep(10);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(age &gt; <span class=\"number\">18</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;Tom&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">getNation</span><span class=\"params\">(String nation)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">info</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;我的国籍是：&quot;</span> + nation;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> info;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//体会形参是否需要设置的问题</span></span><br><span class=\"line\"><span class=\"comment\">//\tpublic void sort(int[] arr)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t</span></span><br><span class=\"line\"><span class=\"comment\">//\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//\tpublic void sort()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tint[] arr = new int[]&#123;3,4,5,2,5,63,2,5&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t//。。。。</span></span><br><span class=\"line\"><span class=\"comment\">//\t&#125;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">info</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//错误的</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tpublic void swim()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\t</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><a href=\"practice/java/practice/Person.java\">&lt;font color=red&gt; 练习 1&lt;/font&gt;</a> + <a href=\"practice/java/practice/PersonTest.java\">&lt;font color=red&gt; 测试 &lt;/font&gt;</a></li>\n<li><a href=\"practice/java/practice/CircleTest.java\">&lt;font color=red&gt; 练习 2&lt;/font&gt;</a></li>\n<li><a href=\"practice/java/practice/ExerTest.java\">&lt;font color=red&gt; 练习 3&lt;/font&gt;</a></li>\n<li><a href=\"practice/java/practice/StudentTest.java\">&lt;font color=red&gt; 练习 4&lt;/font&gt;</a></li>\n<li><a href=\"practice/java/practice/StudentTest2.java\">&lt;font color=red&gt; 练习 4 优化 &lt;/font&gt;</a></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"理解万事万物皆对象\"><a class=\"anchor\" href=\"#理解万事万物皆对象\">#</a> 理解” 万事万物皆对象 “</h5>\n<p>1. 在 Java 语言范畴中，我们都将功能、结构等封装到类中，通过类的实例化，来调用具体的功能结构。<br />\n》Scanner,String 等<br />\n》文件：File<br />\n》网络资源：URL<br />\n2. 涉及到 Java 语言与前端 html、后端的数据库交互时，前后端的结构在 Java 层面交互时，都体现为类、对象。</p>\n<h5 id=\"对象数组的内存解析\"><a class=\"anchor\" href=\"#对象数组的内存解析\">#</a> 对象数组的内存解析</h5>\n<ul>\n<li>引用类型的变量，只可能存储量两类值：null 或地址值（含变量类型）<br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*引用类型的变量，只可能存储量两类值：null或地址值（含变量类型）*/</span></span><br><span class=\"line\">Student[] stus= <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">stus[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">sysout(stus[<span class=\"number\">0</span>].state);<span class=\"comment\">//1</span></span><br><span class=\"line\">sysout(stus[<span class=\"number\">1</span>]);<span class=\"comment\">//null</span></span><br><span class=\"line\">sysout(stus[<span class=\"number\">1</span>].number);<span class=\"comment\">//异常</span></span><br><span class=\"line\">stus[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">sysout(stus[<span class=\"number\">1</span>].number);<span class=\"comment\">//0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> number;<span class=\"comment\">//学号</span></span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;<span class=\"comment\">//年级</span></span><br><span class=\"line\">  <span class=\"type\">int</span> score;<span class=\"comment\">//成绩</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\n<img data-src=\"/images/2022-10-21-13-20-01.png\" alt=\"\" /></li>\n</ul>\n<h5 id=\"匿名对象的使用\"><a class=\"anchor\" href=\"#匿名对象的使用\">#</a> 匿名对象的使用</h5>\n<ul>\n<li>理解\n<ul>\n<li>我们创建的对象，没有显示的赋值给一个变量名。即为匿名对象</li>\n</ul>\n</li>\n<li>特征\n<ul>\n<li>匿名对象只能调用一次。</li>\n</ul>\n</li>\n<li><a href=\"practice/java/practice/InstanceTest.java\">&lt;font color=red&gt; 例题 &lt;/font&gt;</a></li>\n</ul>\n<h5 id=\"自定义数组的工具类\"><a class=\"anchor\" href=\"#自定义数组的工具类\">#</a> 自定义数组的工具类</h5>\n<ul>\n<li><a href=\"practice/java/practice/ArrayUtilTest.java\">&lt;font color=red&gt; 工具类 &lt;/font&gt;</a></li>\n</ul>\n<h5 id=\"方法的重载overload\"><a class=\"anchor\" href=\"#方法的重载overload\">#</a> 方法的重载 (overload)</h5>\n<ul>\n<li>\n<p>定义：</p>\n<ul>\n<li>在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。<br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* \t\t“两同一不同”:同一个类、相同方法名</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t\t\t  参数列表不同：参数个数不同，参数类型不同</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">* 2.举例:*/</span></span><br><span class=\"line\"> \t\tArrays类中重载的sort() / binarySearch()</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>判断是否重载：</p>\n<ul>\n<li>与方法的返回值类型、权限修饰符、形参变量名、方法体都无关。</li>\n</ul>\n</li>\n<li>\n<p>在通过对象调用方法时，如何确定某一个指定的方法：</p>\n<ul>\n<li>方法名 ---》参数列表</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OverLoadTest</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">OverLoadTest</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OverLoadTest</span>();</span><br><span class=\"line\">    test.getSum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);\t<span class=\"comment\">//调用的第一个，输出1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//如下的四个方法构成了重载</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getSum</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getSum</span><span class=\"params\">(<span class=\"type\">double</span> d1,<span class=\"type\">double</span> d2)</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getSum</span><span class=\"params\">(String s,<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getSum</span><span class=\"params\">(<span class=\"type\">int</span> i,String s)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//以下3个是错误的重载</span></span><br><span class=\"line\"><span class=\"comment\">//\tpublic int getSum(int i,int j)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\treturn 0;</span></span><br><span class=\"line\"><span class=\"comment\">//\t&#125;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//\tpublic void getSum(int m,int n)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t</span></span><br><span class=\"line\"><span class=\"comment\">//\t&#125;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//\tprivate void getSum(int i,int j)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t</span></span><br><span class=\"line\"><span class=\"comment\">//\t&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n1、<a href=\"practice/ifreload\">&lt;font color=red&gt; 举例 &lt;/font&gt;</a><br />\n2、<a href=\"practice/java/practice/OverLoad.java\">&lt;font color=red&gt; 编程 &lt;/font&gt;</a></p>\n</li>\n</ul>\n<h5 id=\"font-colorred可变个数的形参font\"><a class=\"anchor\" href=\"#font-colorred可变个数的形参font\">#</a> <a href=\"practice/MethodArgs.java\">&lt;font color=red&gt; 可变个数的形参 &lt;/font&gt;</a></h5>\n<p>JavaSE 5.0 中提供了 Varargs (variable number of arguments) 机制，允许直接定义能和多个实参相匹配的形参。从而，可以用一种更简单的方式，来传递个数可变的实参。</p>\n<h5 id=\"方法参数的值传递机制重点\"><a class=\"anchor\" href=\"#方法参数的值传递机制重点\">#</a> 方法参数的值传递机制 (重点！！！)</h5>\n<ul>\n<li>\n<p><a href=\"practice/java/practice/ValueTransferTest.java\">&lt;font color=red&gt; 关于变量的赋值 &lt;/font&gt;</a></p>\n<ol>\n<li>如果变量是基本数据类型，此时赋值的是变量所保存的数据值</li>\n<li>如果变量是引用数据类型，此时赋值的是变量所保存的数据的地址值</li>\n</ol>\n</li>\n<li>\n<p><a href=\"practice/java/practice/ValueTransferTest1.java\">&lt;font color=red&gt; 针对基本数据类型 &lt;/font&gt;</a></p>\n<ol>\n<li>\n<p>形参：方法定义时，声明的小括号内的参数<br />\n实参：方法调用时，实际传递给形参的数据</p>\n</li>\n<li>\n<p>值传递机制：<br />\n如果参数是基本数据类型，此时实参赋值给形参的是实参真是存储的数据值。</p>\n</li>\n</ol>\n</li>\n<li>\n<p><a href=\"practice/java/practice/ValueTransferTest2.java\">&lt;font color=red&gt; 针对引用数据类型 &lt;/font&gt;</a></p>\n<ul>\n<li>如果参数是引用数据类型，此时实参赋值给形参的是实参存储数据的地址值。</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"/images/2022-10-21-15-25-49.png\" alt=\"\" /></p>\n<ul>\n<li><a href=\"practice/java/practice/ArrayPrint.java\">&lt;font color=red&gt; 练习 1:&lt;/font&gt;</a></li>\n<li><a href=\"practice/java/practice/PassObject.java\">&lt;font color=red&gt; 练习 2:&lt;/font&gt;</a></li>\n</ul>\n<h5 id=\"递归recursion方法\"><a class=\"anchor\" href=\"#递归recursion方法\">#</a> 递归 (recursion) 方法</h5>\n<ul>\n<li>递归方法：一个方法体内调用它自身。</li>\n<li>方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。</li>\n<li>递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。<br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RecursionTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 例1:计算1-100之间所有自然数的和</span></span><br><span class=\"line\">\t<span class=\"comment\">// 方法1:</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">\t\tsum += i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;sum = &quot;</span> + sum);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 方法2:</span></span><br><span class=\"line\">\t<span class=\"type\">RecursionTest</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RecursionTest</span>();</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">sum1</span> <span class=\"operator\">=</span> test.getSum(<span class=\"number\">100</span>);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;sum1 = &quot;</span> + sum1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例1:计算1-n之间所有自然数的和</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getSum</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n + getSum(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例2:计算1-n之间所有自然数的乘积</span></span><br><span class=\"line\"><span class=\"comment\">//归求阶乘(n!)的算法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getSum1</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n * getSum1(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"面向对象特征之一封装与隐藏\"><a class=\"anchor\" href=\"#面向对象特征之一封装与隐藏\">#</a> 面向对象特征之一：封装与隐藏</h3>\n<ol>\n<li>封装性的引入与体现\n<ul>\n<li>为什么需要封装？封装的作用和含义？<br />\n我要用洗衣机，只需要按一下开关和洗涤模式就可以了。有必要了解洗衣机内部的结构吗？有必要碰电动机吗？<br />\n我要开车</li>\n</ul>\n</li>\n<li>我们程序设计追求 “高内聚，低耦合”\n<ul>\n<li>高内聚：类的内部数据操作细节自己完成，不允许外部干涉</li>\n<li>低耦合：仅对外暴露少量的方法用于使用</li>\n</ul>\n</li>\n<li>隐藏对象内部的复杂性，只对外公开简单的接口\n<ul>\n<li>把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 一、问题的引入：</span></span><br><span class=\"line\"><span class=\"comment\">*    当我们创建一个类的对象以后，我们可以通过&quot;对象.属性&quot;的方式，对对象的属性进行赋值。这里，赋值操作要受到</span></span><br><span class=\"line\"><span class=\"comment\">*    属性的数据类型和存储范围的制约。但除此之外，没有其他制约条件。但是，实际问题中，我们往往需要给属性赋值</span></span><br><span class=\"line\"><span class=\"comment\">*    加入额外限制条件。这个条件就不能在属性声明时体现，我们只能通过方法进行条件的添加。比如说，setLegs</span></span><br><span class=\"line\"><span class=\"comment\">*    同时，我们需要避免用户再使用“对象.属性”的方式对属性进行赋值。则需要将属性声明为私有的(private)</span></span><br><span class=\"line\"><span class=\"comment\">*    --》此时，针对于属性就体现了封装性。</span></span><br><span class=\"line\"><span class=\"comment\">*    </span></span><br><span class=\"line\"><span class=\"comment\">* 二、封装性的体现：</span></span><br><span class=\"line\"><span class=\"comment\">*    我们将类的属性私有化(private),同时,提供公共的(public)方法来获取(getXxx)和设置(setXxx)</span></span><br><span class=\"line\"><span class=\"comment\">*    </span></span><br><span class=\"line\"><span class=\"comment\">*    拓展：封装性的体现：① 如上 ② 单例模式 ③ 不对外暴露的私有方法</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnimalTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Animal</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>();</span><br><span class=\"line\">    a.name = <span class=\"string\">&quot;大黄&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//\t\ta.age = 1;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\ta.legs = 4;//The field Animal.legs is not visible</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    a.show();</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//\t\ta.legs = -4;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\ta.setLegs(6);</span></span><br><span class=\"line\">    a.setLegs(-<span class=\"number\">6</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//\t\ta.legs = -4;//The field Animal.legs is not visible</span></span><br><span class=\"line\">    a.show();</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(a.name);</span><br><span class=\"line\">    System.out.println(a.getLegs());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> legs; <span class=\"comment\">//腿的个数</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//对于属性的设置</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setLegs</span><span class=\"params\">(<span class=\"type\">int</span> l)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= <span class=\"number\">0</span> &amp;&amp; l % <span class=\"number\">2</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      legs = l;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      legs = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//对于属性的获取</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getLegs</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> legs;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;动物进食&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;name = &quot;</span> + name + <span class=\"string\">&quot;,age = &quot;</span> + age + <span class=\"string\">&quot;,legs = &quot;</span> + legs);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//提供关于属性 age 的 get 和 set 方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> a)</span>&#123;</span><br><span class=\"line\">    age = a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h5 id=\"四种权限修饰符的理解与测试\"><a class=\"anchor\" href=\"#四种权限修饰符的理解与测试\">#</a> 四种权限修饰符的理解与测试</h5>\n<p><img data-src=\"/images/2022-10-21-15-28-46.png\" alt=\"\" /></p>\n<ul>\n<li>\n<p>对于 class 的权限修饰只可以用 public 和 default (缺省)</p>\n<ul>\n<li>public 类可以在任意地方被访问</li>\n<li>default 类只可以被同一个包内部的类访问</li>\n</ul>\n</li>\n<li>\n<p>封装性的体现，需要权限修饰符来配合</p>\n<ol>\n<li>\n<p>Java 规定的 4 种权限：(从小到大排序) private、缺省、protected、public</p>\n</li>\n<li>\n<p>4 种权限用来修饰类及类的内部结构：属性、方法、构</p>\n</li>\n<li>\n<p>具体的，4 种权限都可以用来修饰类的内部结构：属性、方法、构造器、内部类，修饰类的话，只能使用：缺省、public</p>\n</li>\n<li>\n<p>总结封装性：Java 提供了 4 中权限修饰符来修饰类积累的内部结构，体现类及类的内部结构的可见性的方法</p>\n</li>\n</ol>\n<p>1、Order 类<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Order</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> orderPrivate;</span><br><span class=\"line\">  <span class=\"type\">int</span> orderDefault;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> orderPublic;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">methodPrivate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    orderPrivate = <span class=\"number\">1</span>;</span><br><span class=\"line\">    orderDefault = <span class=\"number\">2</span>;</span><br><span class=\"line\">    orderPublic = <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">methodDefault</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    orderPrivate = <span class=\"number\">1</span>;</span><br><span class=\"line\">    orderDefault = <span class=\"number\">2</span>;</span><br><span class=\"line\">    orderPublic = <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">methodPublic</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    orderPrivate = <span class=\"number\">1</span>;</span><br><span class=\"line\">    orderDefault = <span class=\"number\">2</span>;</span><br><span class=\"line\">    orderPublic = <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n2.OrderTest 类<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OrderTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">Order</span> <span class=\"variable\">order</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Order</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    order.orderDefault = <span class=\"number\">1</span>;</span><br><span class=\"line\">    order.orderPublic = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">//出了 Order 类之后，私有的结构就不可调用了</span></span><br><span class=\"line\"><span class=\"comment\">//\t\torder.orderPrivate = 3;//The field Order.orderPrivate is not visible</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    order.methodDefault();</span><br><span class=\"line\">    order.methodPublic();</span><br><span class=\"line\">    <span class=\"comment\">//出了 Order 类之后，私有的结构就不可调用了</span></span><br><span class=\"line\"><span class=\"comment\">//\t\torder.methodPrivate();//The method methodPrivate() from the type Order is not visible</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n3. 相同项目不同包的 OrderTest 类<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> github.Order;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OrderTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Order</span> <span class=\"variable\">order</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Order</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    order.orderPublic = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">//出了 Order 类之后，私有的结构、缺省的声明结构就不可调用了</span></span><br><span class=\"line\"><span class=\"comment\">//\t\torder.orderDefault = 1;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\torder.orderPrivate = 3;//The field Order.orderPrivate is not visible</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    order.methodPublic();</span><br><span class=\"line\">    <span class=\"comment\">//出了 Order 类之后，私有的结构、缺省的声明结构就不可调用了</span></span><br><span class=\"line\"><span class=\"comment\">//\t\torder.methodDefault();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\torder.methodPrivate();//The method methodPrivate() from the type Order is not visible</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h3 id=\"类的成员三构造器构造方法\"><a class=\"anchor\" href=\"#类的成员三构造器构造方法\">#</a> 类的成员三：构造器 (构造方法)</h3>\n<h5 id=\"构造器的理解\"><a class=\"anchor\" href=\"#构造器的理解\">#</a> 构造器的理解</h5>\n<ul>\n<li>\n<p>构造器的作用</p>\n<ol>\n<li>创建对象</li>\n<li>初始化对象的属性</li>\n</ol>\n</li>\n<li>\n<p>说明</p>\n<ol>\n<li>如果没有显示的定义类的构造器的话，则系统默认提供一个空参的构造器。</li>\n<li>定义构造器的格式：权限修饰符  类名 (形参列表)</li>\n<li>一个类中定义的多个构造器，彼此构成重载。</li>\n<li>一旦显示的定义了类的构造器之后，系统不再提供默认的空参构造器。</li>\n<li>一个类中，至少会有一个构造器</li>\n</ol>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PersonTest</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建类的对象:new + 构造器</span></span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();\t<span class=\"comment\">//Person()这就是构造器</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    p.eat();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">p1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;Tom&quot;</span>);</span><br><span class=\"line\">    System.out.println(p1.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//属性</span></span><br><span class=\"line\">  String name;</span><br><span class=\"line\">  <span class=\"type\">int</span> age;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//构造器</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Person()......&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String n)</span>&#123;</span><br><span class=\"line\">    name = n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String n,<span class=\"type\">int</span> a)</span>&#123;</span><br><span class=\"line\">    name = n;</span><br><span class=\"line\">    age = a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;人吃饭&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">study</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;人学习&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h5 id=\"总结属性赋值的过程\"><a class=\"anchor\" href=\"#总结属性赋值的过程\">#</a> 总结属性赋值的过程</h5>\n<ul>\n<li>属性赋值的先后顺序\n<ul>\n<li>① 默认初始化值</li>\n<li>② 显式初始化</li>\n<li>③ 构造器中赋值</li>\n<li>④ 通过 &quot;对象。方法&quot; 或 “对象。属性” 的方式，赋值</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"javabean-的使用\"><a class=\"anchor\" href=\"#javabean-的使用\">#</a> JavaBean 的使用</h5>\n<p>JavaBean 是一种 Java 语言写成的可重用组件。</p>\n<ul>\n<li>\n<p>javaBean，是指符合如下标准的 Java 类：</p>\n<ul>\n<li>类是公共的</li>\n<li>有一个无参的公共的构造器</li>\n<li>有属性，且有对应的 get、set 方法</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Customer</span> &#123;     <span class=\"comment\">//类是公共的</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Customer</span><span class=\"params\">()</span>&#123;        <span class=\"comment\">//无参公共构造器</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(<span class=\"type\">int</span> i)</span>&#123;   <span class=\"comment\">//set方法</span></span><br><span class=\"line\">    id = i; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getId</span><span class=\"params\">()</span>&#123;         <span class=\"comment\">//get方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h4 id=\"uml类图\"><a class=\"anchor\" href=\"#uml类图\">#</a> UML 类图</h4>\n<p><img data-src=\"/images/2022-10-21-15-31-34.png\" alt=\"\" /></p>\n<blockquote>\n<p>+ 表示 public 类型，- 表示 private 类型，# 表示 protected 类型<br />\n方法的写法：方法的类型 (+、-) 方法名 (参数名：参数类型)：返回值类型</p>\n</blockquote>\n<h3 id=\"关键字this的使用\"><a class=\"anchor\" href=\"#关键字this的使用\">#</a> 关键字 this 的使用</h3>\n<h5 id=\"this-调用属性-方法-构造器\"><a class=\"anchor\" href=\"#this-调用属性-方法-构造器\">#</a> this 调用属性、方法、构造器</h5>\n<ul>\n<li>使用：\n<ol>\n<li>this 用来修饰、调用：属性、方法、构造器</li>\n<li>this 修饰属性和方法。理解为：当前对象，或当前正在创建的对象。</li>\n<li>在类的方法中，我们可以使用 &quot;this. 属性&quot; 或 &quot;this. 方法&quot; 的方式，调用当前对象属性和方法。<br />\n通常情况下，我们都选择省略 “this.”。特殊情况下，如果方法的形参和类的属性同名，我们必须显式<br />\n的使用 &quot;this. 变量&quot; 的方式，表明此变量是属性，而非形参。</li>\n<li>在类的构造器中，我们可以使用 &quot;this. 属性&quot; 或 &quot;this. 方法&quot; 的方式，调用正在创建的对象属性和方法。<br />\n但是，通常情况下，我们都选择省略 “this.”。特殊情况下，如果构造器的形参和类的属性同名，我们必须显式<br />\n的使用 &quot;this. 变量&quot; 的方式，表明此变量是属性，而非形参。</li>\n<li>this 调用构造器<br />\n① 我们可以在类的构造器中，显式的使用 &quot;this (形参列表)&quot; 的方式，调用本类中重载的其他的构造器！<br />\n② 构造器中不能通过 &quot;this (形参列表)&quot; 的方式调用自己。<br />\n③ 如果一个类中声明了 n 个构造器，则最多有 n -1 个构造器中使用了 &quot;this (形参列表)&quot;。<br />\n④ &quot;this (形参列表)&quot; 必须声明在类的构造器的首行！<br />\n⑤ 在类的一个构造器中，最多只能声明一个 &quot;this (形参列表)&quot;。<br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PersonTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">p1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    p1.setAge(<span class=\"number\">1</span>);</span><br><span class=\"line\">    System.out.println(p1.getAge());</span><br><span class=\"line\">    </span><br><span class=\"line\">    p1.eat();</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">p2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;jerry&quot;</span> ,<span class=\"number\">20</span>);</span><br><span class=\"line\">    System.out.println(p2.getAge());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.eat();</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">info</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Person 初始化时，需要考虑如下的 1,2,3,4...(共 40 行代码)&quot;</span>;</span><br><span class=\"line\">    System.out.println(info);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(<span class=\"type\">int</span> age)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name,<span class=\"type\">int</span> age)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>(age);\t<span class=\"comment\">//调用构造器的一种方式</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\"><span class=\"comment\">//\t\tthis.age = age;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNmea</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;人吃饭&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.study();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">study</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;学习&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"关键字package-import-的使用\"><a class=\"anchor\" href=\"#关键字package-import-的使用\">#</a> 关键字：package、import 的使用</h3>\n<h5 id=\"关键字package\"><a class=\"anchor\" href=\"#关键字package\">#</a> 关键字 —package</h5>\n<ul>\n<li>package 关键字的使用\n<ol>\n<li>为了更好的实现项目中类的管理，提供包的概念</li>\n<li>使用 package 声明类或接口所属的包，声明在源文件的首行</li>\n<li>包，属于标识符，遵循标识符的命名规则、规范 &quot;见名知意&quot;</li>\n<li>每 “.” 一次，就代表一层文件目录。注： 同一个包下，不能命名同名接口或同名<br />\n不同包下，可以命名同名的接口、类。</li>\n</ol>\n</li>\n<li>JDK 中主要的包介绍\n<ol>\n<li>java.lang---- 包含一些 Java 语言的核心类，如 String、Math、Integer、System 和 Thread，提供常用功能</li>\n<li>java.net---- 包含执行与网络相关的操作的类和接口。</li>\n<li>java.io---- 包含能提供多种输入 / 输出功能的类。</li>\n<li>java.util---- 包含一些实用工具类，如定义系统特性、接口的集合框架类、使用与日期日历相关的函数。</li>\n<li>java.text---- 包含了一些 java 格式化相关的类</li>\n<li>java.sql---- 包含了 java 进行 JDBC 数据库编程的相关类 / 接口</li>\n<li>java.awt---- 包含了构成抽象窗口工具集（abstractwindowtoolkits）的多个类，这些类被用来构建和管理应用程序的图形用户界面 (GUI)。B/S  C/S</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"mvc-设计模式\"><a class=\"anchor\" href=\"#mvc-设计模式\">#</a> MVC 设计模式</h5>\n<ul>\n<li>视图层模型层</li>\n<li>控制器层</li>\n<li>数据模型层<br />\n MVC 是常用的设计模式之一，将整个程序分为三个层次：视图模型层，控制器层，数据模型层。这种将程序输入输出、数据处理，以及数据的展示分离开来的设计模式使程序结构变的灵活而且清晰，同时也描述了程序各个对象间的通信方式，降低了程序的耦合性。</li>\n</ul>\n<p><img data-src=\"/images/2022-10-21-15-34-08.png\" alt=\"\" /></p>\n<p><img data-src=\"/images/2022-10-21-15-34-38.png\" alt=\"\" /></p>\n<h5 id=\"关键字-import\"><a class=\"anchor\" href=\"#关键字-import\">#</a> 关键字 - import</h5>\n<ul>\n<li>import 关键字的使用\n<ol>\n<li>在源文件中显式的使用 import 结构导入指定包下的类、接口</li>\n<li>声明在包的声明和类的声明之间</li>\n<li>如果需要导入多个结构，则并列写出即可</li>\n<li>可以使用 &quot;xxx.*&quot; 的方式，表示可以导入 xxx 包下的所有结构。</li>\n<li>如果导入的类或接口是 java.lang 包下的，或者是当前包下的，则可以省略此 import 语句。</li>\n<li>如果在代码中使用不同包下的同名的类。那么就需要使用类的全类名的方式指明调用的是哪个类。</li>\n<li>如果已经导入 java.a 包下的类。那么如果需要使用 a 包的子包下的类的话，仍然需要导入。</li>\n<li>import static 组合的使用：调用指定类或接口下的静态的属性或方法.</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"面向对象中\"><a class=\"anchor\" href=\"#面向对象中\">#</a> 面向对象 (中)</h1>\n<h3 id=\"继承性的使用与理解\"><a class=\"anchor\" href=\"#继承性的使用与理解\">#</a> 继承性的使用与理解</h3>\n<ul>\n<li>\n<p>继承性的好处</p>\n<ol>\n<li>减少了代码的冗余，提高了代码的复用性</li>\n<li>便于功能的扩展</li>\n<li>为之后多态性的使用，提供了前提</li>\n</ol>\n</li>\n<li>\n<p>继承性的格式：class A extends B {}</p>\n<ol>\n<li>A: 子类、派生类、subclass</li>\n<li>B: 父类、超类、基类、superclass</li>\n<li>体现：一旦子类 A 继承父类 B 以后。子类 A 中就获取了父类 B 中声明的结构（属性、私有属性、方法）</li>\n<li>子类继承父类以后，还可以定义自己特有的属性方法，实现功能的拓展</li>\n</ol>\n</li>\n<li>\n<p>java 中关于继承性的规定</p>\n<ol>\n<li>一个类可以被多个子类继承</li>\n<li>java 中类的单继承性 (一个类只能有一个父类)</li>\n<li>子父类是相对的概念</li>\n<li>子类直接继承的父类，称为：直接父类。间接继承的父类称为：间接父类</li>\n<li>子类继承父类以后，就获取了直接父类以及间接父类中声明的属性和方法</li>\n</ol>\n</li>\n<li>\n<p>object 类的理解</p>\n<ol>\n<li>如果我们没有显示的声明一个类的父类的化，则此类继承于 java.lang.Object 类</li>\n<li>所有的 java 类（除 java.lang.Object 类之外）都直接或间接的继承于 java.lang.object 类</li>\n<li>意味着，所有的 java 类具有 java.lang.object 类声明的功能</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"方法的重写overrideoverwrite\"><a class=\"anchor\" href=\"#方法的重写overrideoverwrite\">#</a> 方法的重写 (override/overwrite)</h3>\n<ul>\n<li>重写：子类继承父类以后，可以对父类中同名同参的方法，进行覆盖操作</li>\n<li>应用：重写以后，当创建子类对象以后，通过子类对象调用子父类中的同名参数的方法时，实际执行的是子类重写父类的的方法</li>\n<li>重写的规定：\n<ul>\n<li>方法的声明：权限修饰符 返回值类型 方法名（）throws 异常的类型 {}</li>\n<li>约定俗称：子类中的叫重写的方法，父类中的叫被重写的方法\n<ol>\n<li>子类重写的方法的方法名和形参列表与父类被重写的方法名和形参列表相同</li>\n<li>子类重写的方法的权限修饰符<mark>不小于</mark>父类被重写的方法的权限修饰符。<mark>注：子类不能重写父类中声明为 private 的方法</mark></li>\n<li>父类被重写的方法的返回值类型是 void, 则子类重写的方法的返回值类型只能是 void</li>\n<li>父类被重写的方法的返回值类型是 A 类型，则子类重写的方法的返回值类型可以是 A 类或 A 类的子类；</li>\n<li>父类被重写的方法的返回值类型如果是基本数据类型 (比如:double)，则子类重写的方法的返回值类型必须是相同的基本数据类型 (必须是:double)</li>\n<li>子类方法抛出的异常不能大于父类被重写的方法抛出的异常</li>\n</ol>\n</li>\n<li><mark>注意：子类与父类中同名同参数的方法必须同时声明为非 static 的 (即为重写)，或者同时声明为 static 的（不是重写）</mark><br />\n因为 static 方法是属于类的，子类无法覆盖父类的方法。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"super关键字的使用\"><a class=\"anchor\" href=\"#super关键字的使用\">#</a> super 关键字的使用</h3>\n<ul>\n<li>\n<p>super 调用属性和方法</p>\n<ol>\n<li>super 理解为：父类的</li>\n<li>super 可以用来调用：属性，方法，构造器</li>\n<li>我们可以在子类的方法或构造器中，通过 &quot;super. 属性&quot; 或 &quot;super. 方法&quot; 的方式，显式的调用父类中声明的属性或方法。但是，通常情况下，我们习惯去省略这个 &quot;super.&quot;</li>\n<li>特殊情况：当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的 使用 &quot;super. 属性&quot; 的方式，表明调用的是父类中声明的属性。</li>\n<li>特殊情况：当子类重写了父类中的方法后，我们想在子类的方法中调用父类中被重写的方法时，必须显式的使用 &quot;super. 方法&quot; 的方式，表明调用的是父类中被重写的方法。</li>\n</ol>\n</li>\n<li>\n<p>super 调用构造器</p>\n<ol>\n<li>我们可以在子类的构造器中显式的使用 &quot;super (形参列表)&quot; 的方式，调用父类中声明的指定的构造器</li>\n<li>super (形参列表)&quot; 的使用，必须声明在子类构造器的首行！</li>\n<li>我们在类的构造器中，针对于 &quot;this (形参列表)&quot; 或 &quot;super (形参列表)&quot; 只能二选一，不能同时出现。</li>\n<li>在构造器的首行，既没有显式的声明 &quot;this (形参列表)&quot; 或 &quot;super (形参列表)&quot;, 则默认的调用的是父类中的空参构造器。super ()</li>\n<li>在类的多个构造器中，至少有一个类的构造器使用了 &quot;super (形参列表)&quot;, 调用父类中的构造器。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"子类对象的实例化过程\"><a class=\"anchor\" href=\"#子类对象的实例化过程\">#</a> 子类对象的实例化过程</h3>\n<ul>\n<li>\n<p>从结果上看：子类继承父类以后，就获取了父类中声明的属性或方法。<br />\n创建子类的对象中，在堆空间中，就会加载所有父类中声明的属性。</p>\n</li>\n<li>\n<p>从过程看：当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类构造器，直到调用了 java.lang.Object 类中空参的构造器为止。正因为加载过所有的父类结构，所以才可以看到内存中有父类中的结构，子类对象可以考虑进行调用。</p>\n</li>\n<li>\n<p>练习 bank (<a href=\"practice/java/practice/Account.java\">&lt;font color=red&gt;Account&lt;/font&gt;</a>,<a href=\"practicejava/practice//AccountTest.java\">&lt;font color=red&gt;AccountTest&lt;/font&gt;</a>,<a href=\"practice/java/practice/CheckAccount.java\">&lt;font color=red&gt;CheckAccount&lt;/font&gt;</a>,<a href=\"practice/java/practice/CheckAccountTest.java\">&lt;font color=red&gt;CheckAccountTest&lt;/font&gt;</a>)</p>\n</li>\n</ul>\n<h3 id=\"多态性\"><a class=\"anchor\" href=\"#多态性\">#</a> 多态性</h3>\n<ul>\n<li>\n<p>面向对象之三：多态性</p>\n<ol>\n<li>\n<p>理解多态性：可以理解为一个事物的多种态性。</p>\n</li>\n<li>\n<p>何为多态性：对象的多态性：父类的引用指向子类的对象 (或子类的对象赋值给父类的引用)</p>\n</li>\n<li>\n<p>多态的使用：虚拟方法调用<br />\n有了对象多态性以后，我们在编译期，只能调用父类声明的方法，但在执行期实际执行的是子类重写父类的方法<br />\n简称：编译时，看左边；运行时，看右边。</p>\n</li>\n</ol>\n<p>若编译时类型和运行时类型不一致，就出现了对象的多态性 (Polymorphism)<br />\n多态情况下，<br />\n“看左边”：看的是父类的引用（父类中不具备子类特有的方法）<br />\n“看右边”：看的是子类的对象（实际运行的是子类重写父类的方法）</p>\n<ol start=\"4\">\n<li>多态性的使用前提：<br />\n① <mark>类的继承关系</mark><br />\n② <mark>方法的重写</mark></li>\n<li>对象的多态性:<mark> 只适用于方法，不适用于属性 (编译和运行都看左边)</mark></li>\n</ol>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 多态性应用举例</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnimalTest</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">AnimalTest</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnimalTest</span>();</span><br><span class=\"line\">    test.func(<span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>());</span><br><span class=\"line\">    </span><br><span class=\"line\">    test.func(<span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">func</span><span class=\"params\">(Animal animal)</span>&#123;\t<span class=\"comment\">//Animal animal = new Dog();</span></span><br><span class=\"line\">    animal.eat();</span><br><span class=\"line\">    animal.shout();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//如果没有多态性，就会写很多如下的方法，去调用</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">func</span><span class=\"params\">(Dog dog)</span>&#123;</span><br><span class=\"line\">    dog.eat();</span><br><span class=\"line\">    dog.shout();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">func</span><span class=\"params\">(Cat cat)</span>&#123;</span><br><span class=\"line\">    cat.eat();</span><br><span class=\"line\">    cat.shout();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;动物，进食&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shout</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;动物：叫&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果没有多态性就要写下面的这些</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;狗吃骨头&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shout</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;汪！汪！汪！&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;猫吃鱼&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shout</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;喵！喵！喵！&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h5 id=\"虚拟方法的补充\"><a class=\"anchor\" href=\"#虚拟方法的补充\">#</a> 虚拟方法的补充</h5>\n<ul>\n<li>从编译和运行的角度看：\n<ul>\n<li>重载，是指允许存在多个同名方法，而这些方法的参数不同。<br />\n编译器根据方法不同的参数表，对同名方法的名称做修饰。<br />\n对于编译器而言，这些同名方法就成了不同的方法。<br />\n它们的调用地址在编译期就绑定了。Java 的重载是可以包括父类和子类的，<br />\n即子类可以重载父类的同名不同参数的方法。所以：对于重载而言，在方法调用之前，<br />\n编译器就已经确定了所要调用的方法，这称为 “早绑定” 或 “静态绑定”；<br />\n而对于多态，只有等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，<br />\n这称为 “晚绑定” 或 “动态绑定”。<br />\n引用一句 Bruce Eckel 的话：“不要犯傻，如果它不是晚绑定，它就不是多态。”</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"向下转型的使用\"><a class=\"anchor\" href=\"#向下转型的使用\">#</a> 向下转型的使用</h4>\n<ol>\n<li>有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类的属性和方法不能调用。</li>\n<li>如何才能调用子类所特有的属性和方法？</li>\n<li>解决方法：使用强制类型转换符，强制转换为子类类型，也可称为：向下转型</li>\n</ol>\n<h4 id=\"instanceof-关键字都使用\"><a class=\"anchor\" href=\"#instanceof-关键字都使用\">#</a> instanceof 关键字都使用</h4>\n<ul>\n<li>a instanceof A: 判断对象 a 是否是类 A 的实例。如果，返回 true，如果不是，返回 false</li>\n<li>使用情境：为了避免在向下转型时出现 ClassCastException 异常，我们在进行向下转型之前，先进行 instanceof 的判断，一旦返回 true, 就进行向下转型。如果返回 false，不进行向下转型。</li>\n</ul>\n<h3 id=\"object类都的使用\"><a class=\"anchor\" href=\"#object类都的使用\">#</a> Object 类都的使用</h3>\n<ol>\n<li>Object 类是所有 Java 类的根父类</li>\n<li>如果在类的声明中未使用 extends 关键字指明其父类，则默认父类为 java.lang.Object 类</li>\n<li>Object 类中的功能 (属性、方法) 就具有通用性</li>\n<li>Object 类只声明了一个空参的构造器</li>\n<li>方法:equals () /toString () /getClass () /hashCode () /clone () /<a href=\"practice/java/practice/testFinalize.java\">&lt;font color=red&gt;finalize()&lt;/font&gt;</a></li>\n</ol>\n<ul>\n<li>wait() 、notify()、notifyAll()</li>\n</ul>\n<h5 id=\"object类的主要对象\"><a class=\"anchor\" href=\"#object类的主要对象\">#</a> object 类的主要对象</h5>\n<p><img data-src=\"/images/2022-10-21-15-43-38.png\" alt=\"\" /></p>\n<ul>\n<li>\n<p><strong>运算符</strong></p>\n<ol>\n<li>可以使用在基本数据类型变量和引用数据类型变量中，</li>\n<li>如果比较的是基本数据类型变量，比较两个变量保存的数据是否相等 (不一定类型相同)</li>\n<li>如果比较的是引用数据类型变量：比较两个对象的地址值是否相同，即两个引用是否指向同一个对象实体</li>\n<li>补充: == 符号使用时，必须保证符号左右两边的变量类型一致</li>\n</ol>\n</li>\n<li>\n<p><strong>equals () 方法的使用</strong></p>\n</li>\n</ul>\n<ol>\n<li>\n<p>是一个方法，而非运算符</p>\n</li>\n<li>\n<p>只能适用于引用数据类型</p>\n</li>\n<li>\n<p>Object 类中 equals () 的定义：<br />\npublic boolean equals(Object obj){<br />\nreturn (this == obj);<br />\n}</p>\n</li>\n<li>\n<p>像 String、Date、File、包装类等都重写了 Object 类中的 equals () 方法.<br />\n 两个引用的地址是否相同，而是比较两个对象的 “实体内容” 是否相同。</p>\n</li>\n<li>\n<p>通常情况下，我们自定义的类如果使用 equals () 的话，也通常是比较两个对象的 &quot;实体内容&quot; 是否相同。那么，我们就需要对 Object 类中的 equals () 进行重写。</p>\n</li>\n<li>\n<p>重写的原则：比较两个对象的实体内容是否相同。</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EqualTest</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>,j=<span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"type\">double</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span><span class=\"number\">10.0</span>;</span><br><span class=\"line\">  System.out.println(i == j);\t<span class=\"comment\">//true</span></span><br><span class=\"line\">  System.out.println(i == d); <span class=\"comment\">//true</span></span><br><span class=\"line\">  <span class=\"comment\">//引用数据类型</span></span><br><span class=\"line\">  <span class=\"type\">Customer</span> <span class=\"variable\">cust1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Customer</span>(<span class=\"string\">&quot;Tom&quot;</span> ,<span class=\"number\">21</span>);</span><br><span class=\"line\"><span class=\"type\">Customer</span> <span class=\"variable\">cust2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Customer</span>(<span class=\"string\">&quot;Tom&quot;</span> ,<span class=\"number\">21</span>);</span><br><span class=\"line\">  System.out.println(cust1.equals(cust2));\t<span class=\"comment\">//false</span></span><br><span class=\"line\">  System.out.println(str1 == str2); <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//注意，注意·：：</span></span><br><span class=\"line\">  <span class=\"type\">String</span> <span class=\"variable\">str1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;BAT&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;BAT&quot;</span>);</span><br><span class=\"line\">  System.out.println(str1.equals(str2));\t<span class=\"comment\">//true</span></span><br><span class=\"line\">  System.out.println(str1 == str2); <span class=\"comment\">//false  “==”依然是false,而equasl方法是true,说明重写了</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ol>\n<ul>\n<li>\n<p><strong>toString () 的使用</strong></p>\n<ol>\n<li>当我们输出一个引用，实际上就是调用当前对象的 toString ()</li>\n<li>Object 类中 toString 的定义方法<br />\n public String toString () {<br />\nreturn getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());<br />\n}</li>\n<li>像 String、Date、File、包装类等都重写了 Object 类中的 toString () 方法。\t 使得在调用 toString () 时，返回 &quot;实体内容&quot; 信息.</li>\n<li>自定义类如果重写 toString () 方法，当调用此方法时，<mark>返回对象的 &quot;实体内容&quot;</mark>.</li>\n</ol>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Tostring</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">Txt</span> <span class=\"variable\">a1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Txt</span>(<span class=\"number\">11</span>,<span class=\"string\">&quot;tian&quot;</span>);        <span class=\"comment\">//new TXT对象,</span></span><br><span class=\"line\">     <span class=\"type\">Txt</span> <span class=\"variable\">a2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Txt</span>(<span class=\"string\">&quot;li&quot;</span>);                  <span class=\"comment\">//new TXT对象,</span></span><br><span class=\"line\"></span><br><span class=\"line\">     System.out.println(a1.toString());    <span class=\"comment\">//note.Txt@2d98a335</span></span><br><span class=\"line\">     System.out.println(a2.toString());    <span class=\"comment\">//note.Txt@16b98e56</span></span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">a3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;mm&quot;</span>);           <span class=\"comment\">//new 一个String类对象</span></span><br><span class=\"line\">     System.out.println(a3.toString());          <span class=\"comment\">//mm,输出的是”内容“，而不是地址，说明String类重写了toSting方法</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Txt</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> age;</span><br><span class=\"line\">     String name;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">     <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         ;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"string\">&quot;age=&quot;</span> + age +</span><br><span class=\"line\">                 <span class=\"string\">&quot;, name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> ;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"title function_\">Txt</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"title function_\">Txt</span><span class=\"params\">(<span class=\"type\">int</span> age, String name)</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">         <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"title function_\">Txt</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h3 id=\"包装类wrapper的使用\"><a class=\"anchor\" href=\"#包装类wrapper的使用\">#</a> 包装类（Wrapper）的使用</h3>\n<p><img data-src=\"/images/2022-10-21-15-44-46.png\" alt=\"\" /></p>\n<h5 id=\"单元测试方法的使用\"><a class=\"anchor\" href=\"#单元测试方法的使用\">#</a> 单元测试方法的使用</h5>\n<ul>\n<li>java 中的 junit 单元测试\n<ul>\n<li>步骤：\n<ol>\n<li>选中当前项目工程 --》 右键:build path --》 add librbraries --》 JUnit 4 --》下一步</li>\n<li>创建一个 Java 类进行单元测试。</li>\n<li>此时的 Java 类要求:①此类是公共的 ②此类提供一个公共的无参构造器 ，此类中声明单元测试方法。此时的单元测试方法：方法的权限是 public, 没有返回值，没有形参。</li>\n<li>此单元测试方法上需要声明注解:@Test 并在单元测试类中调用:import org.junit.Test;</li>\n<li>声明好单元测试方法以后，就可以在方法体内测试代码。</li>\n<li>写好代码后，左键双击单元测试方法名：右键 --》 run as --》 JUnit Test</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"包装类与基本数据类型相互转换\"><a class=\"anchor\" href=\"#包装类与基本数据类型相互转换\">#</a> 包装类与基本数据类型相互转换</h5>\n<ul>\n<li>\n<p>图解<br />\n<img data-src=\"/images/2022-10-21-15-46-18.png\" alt=\"\" /></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 2.基本数据类型、包装类、String三者之间的相互转换。</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WrapperTest</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//String类型---&gt; 基本数据类型、包装类,调用包装类的parseXxx()</span></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test5</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">str1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//\t\tString str1 = &quot;123a&quot;;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//错误的情况，可能会报错</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tint num1 = (int)str1;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tInteger in1 = (Integer)str1;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num2</span> <span class=\"operator\">=</span> Integer.parseInt(str1); </span><br><span class=\"line\">    System.out.println(num2 + <span class=\"number\">1</span>);\t<span class=\"comment\">//124</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">str2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;true&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">Boolean</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> Boolean.parseBoolean(str2);</span><br><span class=\"line\">    System.out.println(b1);\t<span class=\"comment\">//true</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//基本数据类型、包装类---》String类型，调用String重载的valueOf(Xxx xxx)</span></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num1</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"comment\">//方式1:连接运算</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">str1</span> <span class=\"operator\">=</span> num1 + <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//方式2:调用String的valueOf(Xxx xxx)</span></span><br><span class=\"line\">    <span class=\"type\">float</span> <span class=\"variable\">f1</span> <span class=\"operator\">=</span> <span class=\"number\">12.3f</span>;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">str2</span> <span class=\"operator\">=</span> String.valueOf(f1); <span class=\"comment\">//&quot;12.3&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">Double</span> <span class=\"variable\">d1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Double</span>(<span class=\"number\">12.4</span>);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">str3</span> <span class=\"operator\">=</span> String.valueOf(d1);</span><br><span class=\"line\">    System.out.println(str2);</span><br><span class=\"line\">    System.out.println(str3);\t<span class=\"comment\">//&quot;12.4&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  * JDK 5.0 新特性:自动装箱与自动拆箱</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\tint num1 = 10;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t//基本数据类型 --》 包装类的对象</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tmethod(num1);\t//Object obj = num1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//自动装箱:基本数据类型 --》 包装类</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num2</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">in1</span> <span class=\"operator\">=</span> num2;<span class=\"comment\">//自动装箱</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"type\">Boolean</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> b1;<span class=\"comment\">//自动装箱</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//自动拆箱：包装类 --》 基本数据类型</span></span><br><span class=\"line\">    System.out.println(in1.toString());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num3</span> <span class=\"operator\">=</span> in1;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">(Object obj)</span>&#123;</span><br><span class=\"line\">    System.out.println(obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//包装类 --》 基本数据类型:调用包装类的xxxValue()</span></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">in1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">12</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> in1.intValue();</span><br><span class=\"line\">    System.out.println(i1 + <span class=\"number\">1</span>); </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">Float</span> <span class=\"variable\">f1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Float</span>(<span class=\"number\">12.3f</span>);</span><br><span class=\"line\">    <span class=\"type\">float</span> <span class=\"variable\">f2</span> <span class=\"operator\">=</span> f1.floatValue();</span><br><span class=\"line\">    System.out.println(f2 + <span class=\"number\">1</span>); </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//基本数据类型--》包装类,调用包装类的构造器</span></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num1</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(num1.toString());</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">in1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(num1);</span><br><span class=\"line\">    System.out.println(in1.toString());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">in2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">    System.out.println(in2.toString());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//报异常</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tInteger in3 = new Integer(&quot;123abc&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(in3.toString());</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">Float</span> <span class=\"variable\">f1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Float</span>(<span class=\"number\">12.3f</span>);</span><br><span class=\"line\">    <span class=\"type\">Float</span> <span class=\"variable\">f2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Float</span>(<span class=\"string\">&quot;12.3&quot;</span>);</span><br><span class=\"line\">    System.out.println(f1);</span><br><span class=\"line\">    System.out.println(f2);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">Boolean</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"type\">Boolean</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">Boolean</span> <span class=\"variable\">b3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"string\">&quot;true123&quot;</span>);</span><br><span class=\"line\">    System.out.println(b3); <span class=\"comment\">//false</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">Order</span> <span class=\"variable\">order</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Order</span>();</span><br><span class=\"line\">    System.out.println(order.isMale); <span class=\"comment\">//false</span></span><br><span class=\"line\">    System.out.println(order.isFemale); <span class=\"comment\">//null</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Order</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"type\">boolean</span> isMale;</span><br><span class=\"line\">  Boolean isFemale;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<hr />\n<h1 id=\"面向对象下\"><a class=\"anchor\" href=\"#面向对象下\">#</a> 面向对象（下）</h1>\n<h3 id=\"关键字static\"><a class=\"anchor\" href=\"#关键字static\">#</a> 关键字 static</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucGhwLmNuL2phdmEvZ3VpZGUvNDgwNDg0Lmh0bWw=\">https://www.php.cn/java/guide/480484.html</span><br />\n 当我们编写一个类时，其实就是在描述其对象的属性和行为，而并没有产生实质上的对象，只有通过 new 关键字才会产生出对象，这时系统才会分配内存空间给对象，其方法才可以供外部调用。</p>\n<p>我们有时候希望无论是否产生了对象或无论产生了多少对象的情况下，某些特定的数据在内存空间里只有一份。</p>\n<p>例如所有的中国人都有个国家名称，每一个中国人都共享这个国家名称，不必在每一个中国人的实例对象中都单独分配一个用于代表国家名称的变量。<br />\n<img data-src=\"/images/2022-10-21-15-49-02.png\" alt=\"\" /></p>\n<ul>\n<li>static 关键字的使用\n<ol>\n<li>\n<p>static: 静态的</p>\n</li>\n<li>\n<p>static 可以用来修饰：属性、方法、代码块、内部类</p>\n</li>\n<li>\n<p>使用 static 修饰属性：静态变量（或类变量）。</p>\n<ol>\n<li>1 属性：是否使用 static 修饰，又分为：静态属性 VS 非静态属性 (实例变量)<br />\n 实例变量：我们创建了类的多个对象，每个对象都独立的拥有了一套类中的非静态属性。<br />\n当修改其中一个非静态属性时，不会导致其他对象中同样的属性值的修饰。<br />\n静态变量：我们创建了类的多个对象，多个对象共享同一个静态变量。当通过静态变量去修改某一个变量时，<br />\n会导致其他对象调用此静态变量时，是修改过的。</li>\n<li>2 static 修饰属性的其他说明:<br />\n① 静态变量随着类的加载而加载。可以通过 &quot;类。静态变量&quot; 的方式进行调用。<br />\n② 静态变量的加载要早于对象的创建。<br />\n③ 由于类只会加载一次，则静态变量在内存中也只会存在一次。存在方法区的静态域中。<br />\n④</li>\n</ol>\n<p>|     | 类变量  |  实例变量   |<br />\n|  ----  | ----  | ----  |<br />\n| 类  | yes| no |<br />\n| 对象  | yes | no |</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StaticTest</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Chinese.nation = <span class=\"string\">&quot;中国&quot;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">Chinese</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Chinese</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//编译不通过</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tChinese.name = &quot;张继科&quot;;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    c1.eat();</span><br><span class=\"line\">    </span><br><span class=\"line\">    Chinese.show();</span><br><span class=\"line\">    <span class=\"comment\">//编译不通过</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tchinese.eat();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tChinese.info();</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//中国人</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Chinese</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  String name;</span><br><span class=\"line\">  <span class=\"type\">int</span> age;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> String nation;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;中国人吃中餐&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//调用非静态结构</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.info();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;name : &quot;</span> + name);</span><br><span class=\"line\">    <span class=\"comment\">//调用静态结构</span></span><br><span class=\"line\">    walk();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;nation : &quot;</span> + Chinese.nation);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;我是一个中国人！&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//\t\teat();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tname = &quot;Tom&quot;;</span></span><br><span class=\"line\">    <span class=\"comment\">//可以调用静态的结构</span></span><br><span class=\"line\">    System.out.println(Chinese.nation);</span><br><span class=\"line\">    walk();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">info</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;name : &quot;</span> + name + <span class=\"string\">&quot;,age : &quot;</span> + age);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">walk</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"单例设计模式\"><a class=\"anchor\" href=\"#单例设计模式\">#</a> 单例设计模式</h5>\n<blockquote>\n<p>设计模式是<mark>在大量的实践中总结和理论化之后优选的代码结构、编程风格、以及解决问题的思考方式</mark>。设计模免去我们自己再思考和摸索。就像是经典的棋谱，不同的棋局，我们用不同的棋谱。<mark>” 套路”</mark><br />\n 所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类<mark>只能存在一个对象实例</mark>。并且该类只提供一个取得其对象实例的方法。如果我们要让类在一个虚拟机中只能产生一个对象，我们首先必须将类的<mark>构造器的访问权限设置为 private</mark>，这样，就不能用 new 操作符在类的外部产生类的对象了，但在类内部仍可以产生该类的对象。因为在类的外部开始还无法得到类的对象，只能<mark>调用该类的某个静态方法</mark>以返回类内部创建的对象，静态方法只能访问类中的静态成员变量，所以，指向类内部产生的<mark>该类对象的变量也必须定义成静态的</mark>。</p>\n</blockquote>\n<ul>\n<li>特点:\n<ol>\n<li>一个类只能有一个实例；</li>\n<li>自己创建这个实例；</li>\n<li>整个系统都要使用这个实例</li>\n</ol>\n</li>\n<li>饿汉模式\n<ol>\n<li>优点：饿汉式线程是安全的</li>\n<li>缺点：对象加载时间过长</li>\n</ol>\n</li>\n<li>懒汉式\n<ol>\n<li>优点： 延迟对象的创建</li>\n<li>缺点目前的写法，会线程不安全。---》到多线程内容时，再修改<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">//单例的饿汉式</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingletonTest</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//Bank bank1 = new Bank(); </span></span><br><span class=\"line\"><span class=\"comment\">//Bank bank2 = new Bank(); </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Bank</span> <span class=\"variable\">bank1</span> <span class=\"operator\">=</span> Bank.getInstance();</span><br><span class=\"line\"><span class=\"type\">Bank</span> <span class=\"variable\">bank2</span> <span class=\"operator\">=</span> Bank.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(bank1 == bank2);</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Bank</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//1.私有化类的构造器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Bank</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//2.内部创见类的对象</span></span><br><span class=\"line\">    <span class=\"comment\">//4.要求此对象也必须声明为静态的</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Bank</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bank</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//3.提供公共的静态的方法，返回类的对象。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bank <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><a href=\"practice2/SingletonTest2\">&lt;font color=red&gt; 单例模式的懒汉式实现 &lt;/font&gt;</a></li>\n<li>应用场景\n<ol>\n<li>win 的任务管理器</li>\n<li>win 的回收站</li>\n<li>网站的计数器</li>\n</ol>\n</li>\n</ul>\n<hr />\n<h3 id=\"理解main方法的语法了解\"><a class=\"anchor\" href=\"#理解main方法的语法了解\">#</a> 理解 main 方法的语法（了解）</h3>\n<p>由于 Java 虚拟机需要调用类的 <mark>main () 方法</mark>，所以该方法的访问<mark>权限</mark>必须是 <mark>public</mark>，又因为 Java 虚拟机在执行 main () 方法时不必创建对象，所以<mark>该方法必须是 static 的</mark>，该方法接收一个 String 类型的数组参数，该数组中保存执行 Java 命令时传递给所运行的类的参数。</p>\n<p>又因为 == main () 方法是静态的 ==，我们不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员，这种情况，我们在之前的例子中多次碰到。</p>\n<ul>\n<li>main () 方法的使用说明\n<ol>\n<li>main () 方法作为程序的入口；</li>\n<li>main () 方法也是一个普通的静态方法</li>\n<li>main () 方法也可以作为我们与控制台交互的方式。(之前，使用 Scanner)</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"类的成员之四代码块\"><a class=\"anchor\" href=\"#类的成员之四代码块\">#</a> 类的成员之四：代码块</h3>\n<ul>\n<li>\n<p>作用：用来初始化类、对象的</p>\n</li>\n<li>\n<p>代码块如果有修饰的话，只能使用 static</p>\n</li>\n<li>\n<p>分类：静态代码块 vs 非静态代码块</p>\n</li>\n<li>\n<p><strong>静态代码块</strong></p>\n<ol>\n<li>内部可以有输出语句</li>\n<li>随着类的加载而执行，而且只执行一次</li>\n<li>作用：初始化类的信息</li>\n<li>如果一个类中，定义了多个静态代码块，则按照声明的先后顺序执行</li>\n<li>静态代码块的执行，优先于非静态代码块的执行</li>\n<li>静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构</li>\n</ol>\n</li>\n<li>\n<p><strong>非静态代码块</strong></p>\n<ol>\n<li>非静态代码块</li>\n<li>内部可以有输出语句</li>\n<li>随着对象的创建而执行</li>\n<li>每创建一个对象，就执行一次非静态代码块。</li>\n<li>作用：可以在创建对象时，对对象的属性等进行初始化。</li>\n<li>如果一个类中，定义了多个非静态代码块，则按照声明的先后顺序执行</li>\n<li>非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法。</li>\n</ol>\n</li>\n<li>\n<p><strong>对属性可以复制的位置：</strong></p>\n<ol>\n<li>默认初始化</li>\n<li>显式初始化</li>\n<li>构造器中初始化</li>\n<li>有了对象以后，可以通过 &quot;对象。属性&quot; 或 &quot;对象。方法&quot; 的方式，进行赋值。</li>\n<li>在代码块中赋值</li>\n</ol>\n<ul>\n<li>执行的先后顺序:① - ② / ⑤ - ③ - ④</li>\n</ul>\n<hr />\n</li>\n</ul>\n<h3 id=\"关键字final\"><a class=\"anchor\" href=\"#关键字final\">#</a> 关键字：final</h3>\n<ul>\n<li>final: 最终的</li>\n</ul>\n<ol>\n<li>final 可以用来修饰的结构：类、方法、变量</li>\n<li>final 用来修饰一个类：此类不能被其他类所继承。<br />\n比如：String 类、System 类、StringBuffer 类</li>\n<li>final 修饰一个方法:final 标记的方法不能被子类重写。<br />\n比如：Object 类中的 getClass ()。</li>\n<li>final 用来修饰变量：此时的 &quot;变量&quot;(成员变量或局部变量) 就是一个常量。名称大写，且只能被赋值一次。<br />\n4. 1 final 修饰属性，可以考虑赋值的位置有：显式初始化、代码块中初始化、构造器中初始化<br />\n 4. 2  final 修饰局部变量:<br />\n 尤其是使用 final 修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。<br />\n一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。</li>\n</ol>\n<p>static final 用来修饰：全局常量</p>\n<ul>\n<li>\n<p>例：<br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FinalTest</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">WIDTH</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"type\">int</span> LEFT;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"type\">int</span> RIGHT;</span><br><span class=\"line\"><span class=\"comment\">//\tfinal int DOWN;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    LEFT = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">FinalTest</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    RIGHT = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">FinalTest</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">    RIGHT = n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//\tpublic void setDown(int down)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tthis.DOWN = down;</span></span><br><span class=\"line\"><span class=\"comment\">//\t&#125;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dowidth</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\twidth = 20;\t//width cannot be resolved to a variable</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">NUM</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;\t<span class=\"comment\">//常量</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tnum += 20;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"type\">int</span> num)</span>&#123;</span><br><span class=\"line\">    System.out.println(num);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    num = num + <span class=\"number\">5</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">FinalTest</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FinalTest</span>();</span><br><span class=\"line\"><span class=\"comment\">//\t\ttest.setDown(5);</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    test.show(<span class=\"number\">10</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FianlA</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//class B extends FinalA&#123;     //错误，不能被继承。</span></span><br><span class=\"line\"><span class=\"comment\">//\t</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//class C extends String&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AA</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//class BB extends AA&#123;\t// 错误，不能被重写。</span></span><br><span class=\"line\"><span class=\"comment\">//\tpublic void show()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t</span></span><br><span class=\"line\"><span class=\"comment\">//\t&#125;</span></span><br></pre></td></tr></table></figure></p>\n<hr />\n</li>\n</ul>\n<h3 id=\"抽象类与抽象方法\"><a class=\"anchor\" href=\"#抽象类与抽象方法\">#</a> 抽象类与抽象方法</h3>\n<p>随着继承层次中一个个新子类的定义，类变得越来越具体，而父类则更一般，更通用。类的设计应该保证父类和子类能够共享特征。有时将一个父类设计得非常抽象，以至于它没有具体的实例，这样的类叫做抽象类。<br />\n<img data-src=\"/images/2022-10-21-15-51-41.png\" alt=\"\" /></p>\n<h5 id=\"abstract-关键字的使用\"><a class=\"anchor\" href=\"#abstract-关键字的使用\">#</a> abstract 关键字的使用</h5>\n<ul>\n<li>abstract: 抽象的</li>\n<li>abstract 可以用来修饰的结构：类、方法</li>\n<li>abstract 修饰类：抽象类\n<ul>\n<li>此类不能实例化</li>\n<li>抽象类中一定有构造器，便于子类实例化时调用 (涉及：子类对象实例化全过程)</li>\n<li>开发中，都会提供抽象类的子类，让子类对象实例化，实现相关的操作</li>\n</ul>\n</li>\n<li>abstract 修饰方法：抽象方法\n<ul>\n<li>抽象方法，只有方法的声明，没有方法体。</li>\n<li>包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法</li>\n<li>若子类重写了父类中所有的抽象方法，此子类，</li>\n<li>abstract 使用上的注意点:\n<ol>\n<li>abstract 不能用来修饰变量、代码块、构造器；</li>\n<li>abstract 不能用来修饰私有方法、静态方法、final 的方法、final 的类</li>\n</ol>\n</li>\n<li><a href=\"practice2/AbstractTest.java\">&lt;font color=red&gt; 案例 &lt;/font&gt;</a></li>\n</ul>\n</li>\n<li>抽象类与抽象方法的注意事项（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NDI3NTg5L2FydGljbGUvZGV0YWlscy8xMjQxOTYwNjglRUYlQkMlODk=\">https://blog.csdn.net/qq_35427589/article/details/124196068）</span></li>\n</ul>\n<h5 id=\"抽象类应用\"><a class=\"anchor\" href=\"#抽象类应用\">#</a> 抽象类应用</h5>\n<blockquote>\n<p>抽象类是用来模型化那些父类无法确定全部实现，而是由其子类提供具体实现的对象的类。<br />\n问题：卡车 (Truck) 和驳船 (RiverBarge) 的燃料效率和行驶距离的计算方法完全不同。Vehicle 类不能提供计算方法，但子类可以。</p>\n</blockquote>\n<ul>\n<li>例<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Java 允许类设计者指定：超类声明一个方法但不提供实现，该方法的实现由子类提  供。这样的方法称为抽象方法。有一个或更多抽象方法的类称为抽象类。</span></span><br><span class=\"line\"><span class=\"comment\">* Vehicle 是一个抽象类，有两个抽象方法。</span></span><br><span class=\"line\"><span class=\"comment\">* 注意：抽象类不能实例化 new Vihicle()是非法的</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Vehicle</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"type\">double</span> <span class=\"title function_\">calcFuelEfficiency</span><span class=\"params\">()</span>;<span class=\"comment\">//计算燃料效率的抽象方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"type\">double</span> <span class=\"title function_\">calcTripDistance</span><span class=\"params\">()</span>;<span class=\"comment\">//计算行驶距离的抽象方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Truck</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Vehicle</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">calcFuelEfficiency</span><span class=\"params\">()</span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">//写出计算卡车的燃料效率的具体方法</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">calcTripDistance</span><span class=\"params\">()</span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">//写出计算卡车行驶距离的具体方法</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RiverBarge</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Vehicle</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">calcFuelEfficiency</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">    <span class=\"comment\">//写出计算驳船的燃料效率的具体方法</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">calcTripDistance</span><span class=\"params\">( )</span>  &#123;  </span><br><span class=\"line\">    <span class=\"comment\">//写出计算驳船行驶距离的具体方法</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"创建抽象类的匿名子类对象\"><a class=\"anchor\" href=\"#创建抽象类的匿名子类对象\">#</a> 创建抽象类的匿名子类对象</h5>\n<ul>\n<li>\n<p>抽象类的匿名子类对象？<br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Num</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Creature</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">breath</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Creature</span>&#123;</span><br><span class=\"line\">  String name;</span><br><span class=\"line\">  <span class=\"type\">int</span> age;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name,<span class=\"type\">int</span> age)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//不是抽象方法</span></span><br><span class=\"line\"><span class=\"comment\">//\tpublic void eat()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(&quot;人吃饭&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//\t&#125;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//抽象方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">walk</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;人走路&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">(String name,<span class=\"type\">int</span> age)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(name,age);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;学生应该多吃有营养的。&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">breath</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;学生应该呼吸新鲜的无雾霾空气&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p><strong><mark>测试类</mark></strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 抽象类的匿名子类</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PersonTest</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    method(<span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>());\t<span class=\"comment\">//匿名对象</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">Worker</span> <span class=\"variable\">worker</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>(); </span><br><span class=\"line\">    method1(worker);\t<span class=\"comment\">//非匿名的类非匿名的对象</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    method1(<span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>());\t<span class=\"comment\">//非匿名的类匿名的对象</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;*********************&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//创建了一个匿名子类的对象:p</span></span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;吃东西&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">breath</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;呼吸空气&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    method1(p);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;**********************&quot;</span>); </span><br><span class=\"line\">    <span class=\"comment\">//创建匿名子类的匿名对象</span></span><br><span class=\"line\">    method1(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;吃零食&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">breath</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;云南的空气&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">(Person p)</span>&#123;</span><br><span class=\"line\">    p.eat();</span><br><span class=\"line\">    p.walk();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">(Student s)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Worker</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">breath</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<hr />\n<h3 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h3>\n<h5 id=\"概述-2\"><a class=\"anchor\" href=\"#概述-2\">#</a> 概述</h5>\n<p>一方面，有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，Java 不支持多重继承。有了接口，就可以得到多重继承的效果。</p>\n<p>另一方面，有时必须从几个类中抽取出一些共同的行为特征，而它们之间又没有 is-a 的关系，仅仅是具有相同的行为特征而已。例如：鼠标、键盘、打印机、扫描仪、摄像头、充电器、MP3 机、手机、数码相机、移动硬盘等都支持 USB 连接。</p>\n<p>接口就是规范，定义的是一组规则，体现了现实世界中 “如果你是 / 要… 则必须能…” 的思想。继承是一个 &quot;是不是&quot; 的关系，而接口实现则是 &quot;能不能&quot; 的关系。<br />\n<img data-src=\"/images/2022-10-21-15-58-11.png\" alt=\"\" /></p>\n<ul>\n<li>接口的使用\n<ol>\n<li>接口使用 interface 来定义</li>\n<li>在 java 中：接口和类是并列的两个结构</li>\n<li>如何去定义两个接口：定义接口中的成员\n<ol>\n<li>1 jdk7 及以前：只能定义全局常量和抽象方法<br />\n全局常量：public static final 的，书写中，可以省略不写<br />\n抽象方法：public abstract 的</li>\n<li>2 JDK8: 除了全局常量和抽象方法之外，还可以定义静态方法、默认方法 (略)。</li>\n</ol>\n</li>\n<li>接口中不能定义构造器！意味着接口不可以实例化。</li>\n<li>Java 开发中，接口通过让类去实现 (implements) 的方式来使用。<br />\n如果实现类覆盖了接口中的所有方法，则此实现类就可以实例化<br />\n如果实现类没有覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类</li>\n<li>Java 类可以实现多个接口 ---》弥补了 Java 单继承性的局限性<br />\n格式:class AA extends BB implementd CC,DD,EE</li>\n<li>接口与接口之间是继承，而且可以多继承</li>\n<li>接口的具体使用，体现多态性<br />\n接口的主要用途就是被实现类实现。（面向接口编程）</li>\n<li>接口，实际可以看作是一种规范<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterfaceTest</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    System.out.println(Flayable.MAX_SPEED);</span><br><span class=\"line\">    System.out.println(Flayable.MIN_SPEED);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Flayable</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//全局变量</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">MAX_SPEED</span> <span class=\"operator\">=</span> <span class=\"number\">7900</span>;\t</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"variable\">MIN_SPEED</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;<span class=\"comment\">//省略了 public static final </span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//抽象方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span>;<span class=\"comment\">//省略了 public abstract </span></span><br><span class=\"line\">  <span class=\"comment\">//Interfaces cannot have constructors</span></span><br><span class=\"line\"><span class=\"comment\">//\tpublic Flayable()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t</span></span><br><span class=\"line\"><span class=\"comment\">//\t&#125;\t</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Attackable</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">attack</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Plane</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Flayable</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;飞机通过引擎起飞&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;驾驶员减速停止&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Kite</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Flayable</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bullet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Object</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Flayable</span>,Attackable,CC&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">attack</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//*********************************</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">AA</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">BB</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">CC</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AA</span>,BB&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><a href=\"practice2/USBTest.java\">&lt;font color=red&gt; 举例 &lt;/font&gt;</a></li>\n</ol>\n</li>\n</ul>\n<h5 id=\"接口的应用代理模式proxy\"><a class=\"anchor\" href=\"#接口的应用代理模式proxy\">#</a> 接口的应用：代理模式 (proxy)</h5>\n<p><img data-src=\"/images/2022-10-21-16-00-34.png\" alt=\"\" /></p>\n<ul>\n<li><a href=\"practice2/NetWorkTest.java\">&lt;font color=red&gt; 代理模式 &lt;/font&gt;</a>\n<ul>\n<li><a href=\"practice2/StaticProxyTest.java\">&lt;font color=red&gt; 静态代理 &lt;/font&gt;</a></li>\n<li>[&lt;font color=red&gt; 动态代理 &lt;/font&gt;]</li>\n</ul>\n</li>\n<li>应用场景\n<ul>\n<li>安全代理：屏蔽对真实角色的直接访问。</li>\n<li>远程代理：通过代理类处理远程方法调用（RMI）</li>\n<li>延迟加载：先加载轻量级的代理对象，真正需要再加载真实对象</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"接口的应用工厂模式\"><a class=\"anchor\" href=\"#接口的应用工厂模式\">#</a> 接口的应用：工厂模式</h5>\n<p><img data-src=\"/images/2022-10-21-16-05-01.png\" alt=\"\" /></p>\n<hr />\n<h3 id=\"java8中关于将接口的改进\"><a class=\"anchor\" href=\"#java8中关于将接口的改进\">#</a> Java8 中关于将接口的改进</h3>\n<ul>\n<li><a href=\"practice2/SubClassTest.java\">&lt;font color=red&gt; 案例 &lt;/font&gt;</a></li>\n</ul>\n<h3 id=\"类的内部成员之五内部类\"><a class=\"anchor\" href=\"#类的内部成员之五内部类\">#</a> 类的内部成员之五：内部类</h3>\n<p>当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为外部事物提供服务，那么整个内部的完整结构最好使用内部类。</p>\n<ol>\n<li>\n<p>Java 中允许将一个类 A 声明在另一个类 B 中，则类 A 就是内部类，类 B 就是外部类.</p>\n</li>\n<li>\n<p>内部类的分类：成员内部类\tVS\t局部内部类 (方法内、代码块内、构造器内)</p>\n</li>\n<li>\n<p>1 成员内部类<br />\n  作为外部类的成员，<br />\n  调用外部类的结构<br />\n  可以被 static 修饰<br />\n  可以被 4 种不同的权限修饰</p>\n</li>\n<li>\n<p>2 作为一个类，<br />\n  类内可以定义属性、方法、构造器等<br />\n  可以被 final 修饰，表示此类不能被继承。言外之意，不使用 final，就可以被继承<br />\n  可以 abstract 修饰</p>\n</li>\n<li>\n<p>关注如下的 3 个问题<br />\n   如何实例化成员内部类的对象<br />\n   如何在成员内部类中区分调用外部类的结构<br />\n  开发中局部内部类的使用  见<a href=\"practice2/InnerClassTest1.java\"> &lt;font color=red&gt;《InnerClassTest1.java》&lt;/font&gt;</a><br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InnerClassTest</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//创建Dog实例(静态的成员内部类)</span></span><br><span class=\"line\">    Person.<span class=\"type\">Dog</span> <span class=\"variable\">dog</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>.Dog();</span><br><span class=\"line\">    dog.show();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//创建Bird实例(非静态的成员内部类)</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tPerson.Bird bird = new Person.Bird();</span></span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">    Person.<span class=\"type\">Bird</span> <span class=\"variable\">bird</span> <span class=\"operator\">=</span> p.<span class=\"keyword\">new</span> <span class=\"title class_\">Bird</span>();</span><br><span class=\"line\">    bird.sing();</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\">    </span><br><span class=\"line\">    bird.display(<span class=\"string\">&quot;喜鹊&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;李雷&quot;</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> age;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;人，吃饭&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//静态成员内部类</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span>&#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;卡拉是条狗&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//\t\t\teat();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//非静态成员内部类</span></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Bird</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;杜鹃&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Bird</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sing</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;我是一只猫头鹰&quot;</span>);</span><br><span class=\"line\">      Person.<span class=\"built_in\">this</span>.eat();<span class=\"comment\">//调用外部类的非静态属性</span></span><br><span class=\"line\">      eat();</span><br><span class=\"line\">      System.out.println(age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">      System.out.println(name);\t<span class=\"comment\">//方法的形参</span></span><br><span class=\"line\">      System.out.println(<span class=\"built_in\">this</span>.name);\t<span class=\"comment\">//内部类的属性</span></span><br><span class=\"line\">      System.out.println(Person.<span class=\"built_in\">this</span>.name);\t<span class=\"comment\">//外部类的属性</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//局部内部类</span></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">AA</span>&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">//局部内部类</span></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">BB</span>&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//局部内部类</span></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">CC</span>&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ol>\n<h5 id=\"匿名内部类\"><a class=\"anchor\" href=\"#匿名内部类\">#</a> 匿名内部类</h5>\n<ul>\n<li>详解<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 1.匿名内部类不能定义任何静态成员、方法和类，只能创建匿名内部类的一个实例。</span></span><br><span class=\"line\"><span class=\"comment\">* 一个匿名内部类一定是在new的后面，用其隐含实现一个接口或实现一个类。</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">* 2.格式：</span></span><br><span class=\"line\"><span class=\"comment\">* \t\tnew 父类构造器（实参列表）|实现接口()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t\t\t//匿名内部类的类体部分</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">* 3.匿名内部类的特点</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t&gt; 匿名内部类必须继承父类或实现接口</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t&gt; 匿名内部类只能有一个对象</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t&gt; 匿名内部类对象只能使用多态形式引用</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Product</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getPrice</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnonymousTest</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(Product p)</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;购买了一个&quot;</span> + p.getName() + <span class=\"string\">&quot;，花掉了&quot;</span> + p.getPrice());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">AnonymousTest</span> <span class=\"variable\">ta</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnonymousTest</span>();</span><br><span class=\"line\">    <span class=\"comment\">//调用test方法时，需要传入一个Product参数，</span></span><br><span class=\"line\">    <span class=\"comment\">//此处传入其匿名实现类的实例</span></span><br><span class=\"line\">    ta.test(<span class=\"keyword\">new</span> <span class=\"title class_\">Product</span>()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getPrice</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">567.8</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;AGP显卡&quot;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"局部内部类的使用注意\"><a class=\"anchor\" href=\"#局部内部类的使用注意\">#</a> 局部内部类的使用注意</h5>\n<ul>\n<li>\n<p>详解<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InnerClassTest</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//\tpublic void onCreate()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t</span></span><br><span class=\"line\"><span class=\"comment\">//\tint number = 10;</span></span><br><span class=\"line\"><span class=\"comment\">//\t</span></span><br><span class=\"line\"><span class=\"comment\">//\tView.OnClickListern listener = new View.OnClickListener()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tpublic void onClick()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.println(&quot;hello!&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.println(number);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t</span></span><br><span class=\"line\"><span class=\"comment\">//\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//\t</span></span><br><span class=\"line\"><span class=\"comment\">//\tbutton.setOnClickListener(listener);</span></span><br><span class=\"line\"><span class=\"comment\">//\t</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  * 在局部内部类的方法中(比如:show)如果调用局部内部类所声明的方法(比如：method)中的局部变量(比如：num)的话,</span></span><br><span class=\"line\"><span class=\"comment\">  * 要求此局部变量声明为final的。</span></span><br><span class=\"line\"><span class=\"comment\">  * </span></span><br><span class=\"line\"><span class=\"comment\">  * jdk 7及之前版本：要求此局部变量显式的声明为final的</span></span><br><span class=\"line\"><span class=\"comment\">  * jdk 8及之后的版本：可以省略final的声明</span></span><br><span class=\"line\"><span class=\"comment\">  * </span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//局部变量</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">AA</span>&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\t\t\tnum = 20;\t//Local variable num defined in an enclosing scope must be final or effectively final</span></span><br><span class=\"line\">        System.out.println(num);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<hr />\n</li>\n</ul>\n<h1 id=\"异常\"><a class=\"anchor\" href=\"#异常\">#</a> 异常</h1>\n<p>在使用计算机语言进行项目开发的过程中，即使程序员把代码写得尽善尽美，在系统的运行过程中仍然会遇到一些问题，因为很多问题不是靠代码能够避免的，比如：客户输入数据的格式，读取文件是否存在，网络是否始终保持通畅等等。</p>\n<ul>\n<li>\n<p>理解：</p>\n<ul>\n<li>在 Java 语言中，将程序执行中发生的不正常情况称为 “异常”。(开发过程中的语法错误和逻辑错误不是异常)</li>\n</ul>\n</li>\n<li>\n<p>两类：</p>\n<ul>\n<li>Error：Java 虚拟机无法解决的严重问题。如：JVM 系统内部错误、资源耗尽等严重情况。比如：StackOverflowError 和 OOM。一般不编写针对性的代码进行处理。<br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ErrorTest</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.栈溢出:java.lang.StackOverflowError</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tmain(args);</span></span><br><span class=\"line\">    <span class=\"comment\">//2.堆溢出:java.lang.OutOfMemoryError</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tInteger[] arr = new Integer[1024*1024*1024];</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>Exception: 其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。\n<ul>\n<li>空指针访问</li>\n<li>试图读取不存在的文件</li>\n<li>网络连接中断</li>\n<li>数组角标越界</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>两种解决方法</p>\n<ul>\n<li>一是遇到错误就终止程序的运行。</li>\n<li>另一种方法是由程序员在编写程序时，就考虑到错误的检测、错误消息的提示，以及错误的处理。</li>\n</ul>\n</li>\n<li>\n<p>异常分类</p>\n<ul>\n<li>运行时异常\n<ul>\n<li>是指编译器不要求强制处置的异常。一般是指编程时的逻辑错误，是程序员应该积极避免其出现的异常。java.lang.RuntimeException 类及它的子类都是运行时异常。</li>\n</ul>\n</li>\n<li>编译时异常\n<ul>\n<li>是指编译器要求必须处置的异常。即程序在运行时由于外界因素造成的一般性异常。编译器要求 Java 程序必须捕获或声明所有编译时异常。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>java 异常体系结构</p>\n<ul>\n<li>\n<p>java.lang.Throwable<br />\n|----java.lang.Error: 一般不编写针对性的代码进行处理<br />\n |----java.lang.Exception: 可以进行异常处理<br />\n |---- 编译时异常 (checked)<br />\n|----IOEXception<br />\n|----FileNotFoundException<br />\n|----ClassNotFoundException<br />\n|---- 运行时异常 (unchecked)<br />\n|----NullPointerException<br />\n|----ArrayIndexOutOfBoundsException<br />\n|----ClassCaseException<br />\n|----NumberFormatException<br />\n|----InputMismatchException<br />\n|----ArithmaticException</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExceptionTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ******************以下是编译时异常***************************</span></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test7</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\tFile file = new File(&quot;hello.txt&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tFileInputStream fis = new FileInputStream(file);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tint data = fis.read();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\twhile(data != -1)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.print((char)data);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tdata = fis.read();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tfis.close();</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ******************以下是运行时异常***************************</span></span><br><span class=\"line\">  <span class=\"comment\">// ArithmeticException</span></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test6</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    System.out.println(a / b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// InputMismatchException</span></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test5</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">score</span> <span class=\"operator\">=</span> scanner.nextInt();</span><br><span class=\"line\">    System.out.println(score);</span><br><span class=\"line\"></span><br><span class=\"line\">    scanner.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// NumberFormatException</span></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">    str = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> Integer.parseInt(str);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ClassCaseException</span></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> (String)obj;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ArrayIndexOutOfBoundsException</span></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// int[] arr = new int[10];</span></span><br><span class=\"line\">    <span class=\"comment\">// System.out.println(arr[10]);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// String str = &quot;abc&quot;;</span></span><br><span class=\"line\">    <span class=\"comment\">// System.out.println(str.charAt(3));</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// NullPointerException</span></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// int[] arr = null;</span></span><br><span class=\"line\">    <span class=\"comment\">// System.out.println(arr[3]);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// String str = &quot;abc&quot;;</span></span><br><span class=\"line\">    <span class=\"comment\">// str = null;</span></span><br><span class=\"line\">    <span class=\"comment\">// System.out.println(str.charAt(0));</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"异常处理机制一try-catch-findally\"><a class=\"anchor\" href=\"#异常处理机制一try-catch-findally\">#</a> 异常处理机制一：try-catch-findally</h3>\n<ul>\n<li>try: 捕获异常的第一步是用 try {…} 语句块选定捕获异常的范围，将可能出现异常的代码放在 try 语句块中</li>\n<li>catch: 在 catch 语句块中是对异常对象进行处理的代码。每个 try 语句块可以伴随一个或多个 catch 语句，用于处理可能产生的不同类型的异常对象。</li>\n<li>捕获异常的有关信息：与其它对象一样，可以访问一个异常对象的成员变量或调用它的方法。\n<ul>\n<li>getMessage () 获取异常信息，返回字符串</li>\n<li>printStackTrace () 获取异常类名和异常信息，以及异常出现在程序中的位置。返回值 void</li>\n</ul>\n</li>\n<li>finally\n<ul>\n<li>捕获异常的最后一步是通过 finally 语句为异常处理提供一个统一的出口，使得在控制流转到程序的其它部分以前，能够对程序的状态作统一的管理。</li>\n<li>不论在 try 代码块中是否发生了异常事件，catch 语句是否执行，catch 语句是否有异常，catch 语句中是否有 return，finally 块中的语句都会被执行。</li>\n<li>finally 语句和 catch 语句是任选的<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 异常的处理:抓抛模型</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">* 过程一:“抛”：程序在征程执行过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t\t 并将此对象抛出。</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t\t一旦抛出对象以后，其后的代码就不再执行。</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">* 过程二:“抓”:可以理解为异常的处理方式：① try-catch-finally  ② throws</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">* 二、try-catch-finally的使用</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">* try&#123;</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t//可能出现异常的代码</span></span><br><span class=\"line\"><span class=\"comment\">* &#125;catch(异常类型1 变量名1)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t//处理异常的方式1</span></span><br><span class=\"line\"><span class=\"comment\">* &#125;catch(异常类型2 变量名2)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t//处理异常的方式2</span></span><br><span class=\"line\"><span class=\"comment\">* &#125;catch(异常类型3 变量名3)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t//处理异常的方式3</span></span><br><span class=\"line\"><span class=\"comment\">* &#125;</span></span><br><span class=\"line\"><span class=\"comment\">* ...</span></span><br><span class=\"line\"><span class=\"comment\">* finally&#123;</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t//一定会执行的代码</span></span><br><span class=\"line\"><span class=\"comment\">* &#125;</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">* 说明:</span></span><br><span class=\"line\"><span class=\"comment\">* 1.finally是可选的。</span></span><br><span class=\"line\"><span class=\"comment\">* 2.使用try将可能出现异常代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象</span></span><br><span class=\"line\"><span class=\"comment\">*   的类型，去catch中进行匹配。</span></span><br><span class=\"line\"><span class=\"comment\">* 3.一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常的处理。一旦处理完成，就跳出当前的</span></span><br><span class=\"line\"><span class=\"comment\">*   try-catch结构（在没有写finally的情况）。继续执行其后的代码。</span></span><br><span class=\"line\"><span class=\"comment\">* 4.catch中的异常类型如果没有子父类关系，则谁声明在上，谁声明在下无所谓。</span></span><br><span class=\"line\"><span class=\"comment\">*   catch中的异常类型如果满足子父类关系，则要求子类一定声明在父类的上面。否则，报错</span></span><br><span class=\"line\"><span class=\"comment\">* 5.常用的异常对象处理的方式： ① String  getMessage()    ② printStackTrace()</span></span><br><span class=\"line\"><span class=\"comment\">* 6.在try结构中声明的变量，再出了try结构以后，就不能再被调用,例65行:System.out.println(num);</span></span><br><span class=\"line\"><span class=\"comment\">* 7.try-catch-finally结构可以嵌套  </span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">* 体会1：使用try-catch-finally处理编译时异常，是得程序在编译时就不再报错，但是运行时仍可能报错。</span></span><br><span class=\"line\"><span class=\"comment\">*     相当于我们使用try-catch-finally将一个编译时可能出现的异常，延迟到运行时出现。</span></span><br><span class=\"line\"><span class=\"comment\">*     </span></span><br><span class=\"line\"><span class=\"comment\">* 体会2：开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写try-catch-finally了。</span></span><br><span class=\"line\"><span class=\"comment\">*      针对于编译时异常，我们说一定要考虑异常的处理。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExceptionTest1</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;hello.txt&quot;</span>);</span><br><span class=\"line\">      <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> fis.read();</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(data != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        System.out.print((<span class=\"type\">char</span>)data);</span><br><span class=\"line\">        data = fis.read();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      fis.close();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(FileNotFoundException e)&#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(IOException e)&#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">    str = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> Integer.parseInt(str);\t</span><br><span class=\"line\">      </span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;hello-----1&quot;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(NumberFormatException e)&#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.println(&quot;出现数值转换异常了，不要着急....&quot;);</span></span><br><span class=\"line\">      <span class=\"comment\">//String getMessage():</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.println(e.getMessage());</span></span><br><span class=\"line\">      <span class=\"comment\">//printStackTrace():</span></span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(NullPointerException e)&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;出现空指针异常了，不要着急....&quot;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;出现异常了，不要着急....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(num);</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;hello----2&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>finally 的使用<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * try-catch-finally中finally的使用：</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 1.finally是可选的。</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.finally中声明的是一定会被执行的代码。即使catch中又出现异常了，try中有return语句，catch中有</span></span><br><span class=\"line\"><span class=\"comment\"> *   return语句等情况。</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.像数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动的回收的，我们需要自己手动的进行资源的</span></span><br><span class=\"line\"><span class=\"comment\"> *   释放。此时的资源释放，就需要声明在finally中。</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FinallyTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;hello1.txt&quot;</span>);<span class=\"comment\">//文件可能不存在，而出现异常</span></span><br><span class=\"line\">\t\t\tfis = <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> fis.read();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (data != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print((<span class=\"type\">char</span>) data);</span><br><span class=\"line\">\t\t\t\tdata = fis.read();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (fis != <span class=\"literal\">null</span>)</span><br><span class=\"line\">\t\t\t\t\tfis.close();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> method();</span><br><span class=\"line\">\t\tSystem.out.println(num);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">method</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t\t\tSystem.out.println(arr[<span class=\"number\">10</span>]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;我一定会被执行&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\tSystem.out.println(a / b);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (ArithmeticException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// e.printStackTrace();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t\t\tSystem.out.println(arr[<span class=\"number\">10</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(&quot;我好慢呀~~~&quot;);</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;我好慢呀~~~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"异常处理机制二throws\"><a class=\"anchor\" href=\"#异常处理机制二throws\">#</a> 异常处理机制二：throws</h3>\n<ul>\n<li>\n<p>&quot;throws + 异常类型&quot; 写在方法的声明处。指明此方法执行时，可能会抛出的异常类型。<br />\n一旦当方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足 throws 后异常<br />\n类型时，就会被抛出。异常代码后续的代码，就不再执行！</p>\n</li>\n<li>\n<p>关于异常对象的产生:① 系统自动生成的异常对象<br />\n② 手动生成一个异常对象，并抛出 (throw)</p>\n</li>\n<li>\n<p>体会：try-catch-finally: 真正的将异常给处理掉了。<br />\nthrows 的方式只是将异常抛给了方法的调用者。  并没有真正将异常处理掉。<br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExceptionTest2</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      method2();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    method3();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      method2();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException&#123;</span><br><span class=\"line\">    method1();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> FileNotFoundException,IOException&#123;</span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;hello1.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> fis.read();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(data != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      System.out.print((<span class=\"type\">char</span>)data);</span><br><span class=\"line\">      data = fis.read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    fis.close();</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;hahaha!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p><a href=\"practice2/OverrideTest.java\">&lt;font color=red&gt; 重写方法声明抛出异常的原则 &lt;/font&gt;</a></p>\n</li>\n</ul>\n<h3 id=\"手动抛出异常\"><a class=\"anchor\" href=\"#手动抛出异常\">#</a> 手动抛出异常</h3>\n<ul>\n<li>Java 异常类对象除在程序执行过程中出现异常时由系统自动生成并抛出，也可根据需要使用人工创建并抛出。<br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StudentTest</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">Student</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\"> <span class=\"comment\">//\t\ts.regist(1001);</span></span><br><span class=\"line\">       s.regist(-<span class=\"number\">1001</span>);</span><br><span class=\"line\">       System.out.println(s);</span><br><span class=\"line\">     &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\"> <span class=\"comment\">//\t\t\te.printStackTrace();</span></span><br><span class=\"line\">       System.out.println(e.getMessage());</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">regist</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(id &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">//\t\t\tSystem.out.println(&quot;您输入的数据非法！&quot;);</span></span><br><span class=\"line\">       <span class=\"comment\">//手动抛出异常</span></span><br><span class=\"line\"> <span class=\"comment\">//\t\t\tthrow new RuntimeException(&quot;您输入的数据非法！&quot;);</span></span><br><span class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Exception</span>(<span class=\"string\">&quot;您输入的数据非法！&quot;</span>);</span><br><span class=\"line\">       </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"string\">&quot;Student [id=&quot;</span> + id + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"用户自定义异常类\"><a class=\"anchor\" href=\"#用户自定义异常类\">#</a> 用户自定义异常类</h3>\n<ul>\n<li>一般地，用户自定义异常类都是 RuntimeException 的子类。</li>\n<li>自定义异常类通常需要编写几个重载的构造器。</li>\n<li>自定义异常需要提供 serialVersionUID</li>\n<li>自定义的异常通过 throw 抛出。</li>\n<li>自定义异常最重要的是异常类的名字，当异常出现时，可以根据名字判断异常类型<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 如何自定义异常类？</span></span><br><span class=\"line\"><span class=\"comment\">* 1.继承于现有的异常结构：RuntimeException 、Exception</span></span><br><span class=\"line\"><span class=\"comment\">* 2.提供全局常量：serialVersionUID</span></span><br><span class=\"line\"><span class=\"comment\">* 3.提供重载的构造器</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RuntimeException</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> -<span class=\"number\">7034897193246939L</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">MyException</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">MyException</span><span class=\"params\">(String msg)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(msg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\n<strong> 练习</strong><br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 编写应用程序EcmDef.java，接收命令行的两个参数，</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t要求不能输入负数，计算两数相除。</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t对 数 据 类 型 不 一 致(NumberFormatException)、</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t缺 少 命 令 行 参 数(ArrayIndexOutOfBoundsException、</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t除0(ArithmeticException)及输入负数(EcDef自定义的异常)进行异常处理。</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* 提示：</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t(1)在主类(EcmDef)中定义异常方法(ecm)完成两数相除功能。</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t(2)在main()方法中使用异常处理语句进行异常处理。</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t(3)在程序中，自定义对应输入负数的异常类(EcDef)。</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t(4)运行时接受参数java EcmDef2010//args[0]=“20”args[1]=“10”</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t(5)Interger类的static方法parseInt(Strings)将s转换成对应的int值。</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t如：int a=Interger.parseInt(“314”);//a=314;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EcmDef</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> Integer.parseInt(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> Integer.parseInt(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> ecm(i,j);</span><br><span class=\"line\">      </span><br><span class=\"line\">      System.out.println(result);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NumberFormatException e) &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;数据类型不一致&quot;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (ArrayIndexOutOfBoundsException e)&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;缺少命令行参数&quot;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (ArithmeticException e)&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;除0&quot;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (EcDef e) &#123;</span><br><span class=\"line\">      System.out.println(e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">ecm</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> <span class=\"keyword\">throws</span> EcDef&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || j &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">EcDef</span>(<span class=\"string\">&quot;分子或分母为负数了！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i / j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">//自定义异常类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EcDef</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Exception</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> -<span class=\"number\">33875164229948L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">EcDef</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">EcDef</span><span class=\"params\">(String msg)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(msg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img data-src=\"/images/2022-10-22-11-50-05.png\" alt=\"\" /></p>\n<hr />\n<h1 id=\"多线程\"><a class=\"anchor\" href=\"#多线程\">#</a> 多线程</h1>\n<h3 id=\"基本概念程序-进程-线程\"><a class=\"anchor\" href=\"#基本概念程序-进程-线程\">#</a> 基本概念：程序、进程、线程</h3>\n<ul>\n<li>程序：为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。</li>\n<li>进程：程序的一次执行过程，或是正在运行的一个程序。是一个动态的过程：有它自身的产生、存在和消亡的过程。—— 生命周期</li>\n<li>线程：进程可进一步细化为线程，是一个程序内部的一条执行路径。</li>\n</ul>\n<h5 id=\"进程与线程\"><a class=\"anchor\" href=\"#进程与线程\">#</a> 进程与线程</h5>\n<ul>\n<li>单核 CPU：其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。但是因为 CPU 时间单元特别短，因此感觉不出来。</li>\n<li>一个 Java 应用程序 java.exe，其实至少有三个线程：main () 主线程，gc () 垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。</li>\n<li>如果是多核的话，才能更好的发挥多线程的效率。（现在的服务器都是多核的）</li>\n<li>并行：多个 CPU 同时执行多个任务。比如：多个人 0 同时做不同的事。</li>\n<li>并发：一个 CPU (采用时间片) 同时执行多个任务。比如：秒杀、多个人做同一件事。</li>\n</ul>\n<h5 id=\"多线程的优点\"><a class=\"anchor\" href=\"#多线程的优点\">#</a> 多线程的优点</h5>\n<ol>\n<li>提高应用程序的响应。对图形化界面更有意义，可增强用户体验。</li>\n<li>提高计算机系统 CPU 的利用率</li>\n<li>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改</li>\n</ol>\n<h5 id=\"何时需要多线程\"><a class=\"anchor\" href=\"#何时需要多线程\">#</a> 何时需要多线程</h5>\n<ol>\n<li>程序需要同时执行两个或多个任务。</li>\n<li>程序需要实现一些需要等待的任务时，如用户输入、文件读写操作、网络操作、搜索等。</li>\n<li>需要一些后台运行的程序时。</li>\n</ol>\n<h3 id=\"线程的创建和使用\"><a class=\"anchor\" href=\"#线程的创建和使用\">#</a> 线程的创建和使用</h3>\n<h5 id=\"线程的创建和启动\"><a class=\"anchor\" href=\"#线程的创建和启动\">#</a> 线程的创建和启动</h5>\n<ul>\n<li>Java 语言的 JVM 允许程序运行多个线程，它通过 java.lang.Thread 类来体现。</li>\n<li>Thread 类的特性\n<ul>\n<li>每个线程都是通过某个特定 Thread 对象的 run () 方法来完成操作的，经常把 run () 方法的主体称为线程体</li>\n<li>通过该 Thread 对象的 start () 方法来启动这个线程，而非直接调用 run ()</li>\n</ul>\n</li>\n<li>Thread 类\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>T</mi><mi>h</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{Thread()}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:cyan;\">T</span><span class=\"mord mathnormal\" style=\"color:cyan;\">h</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">a</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 创建新的 Thread 对象</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>T</mi><mi>h</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{Thread(String threadname)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:cyan;\">T</span><span class=\"mord mathnormal\" style=\"color:cyan;\">h</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">a</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;color:cyan;\">S</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:cyan;\">g</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">h</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">a</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">a</span><span class=\"mord mathnormal\" style=\"color:cyan;\">m</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 创建线程并指定线程实例名</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>R</mi><mi>u</mi><mi>n</mi><mi>n</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{Runnabletarget}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;color:cyan;\">R</span><span class=\"mord mathnormal\" style=\"color:cyan;\">u</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">a</span><span class=\"mord mathnormal\" style=\"color:cyan;\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:cyan;\">l</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:cyan;\">g</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span></span></span></span></span>: 指定创建线程的目标对象，它实现了 Runnable 接口中的 run 方法</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>T</mi><mi>h</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>R</mi><mi>u</mi><mi>n</mi><mi>n</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo separator=\"true\">,</mo><mi>S</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{Thread(Runnable target,String name)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:cyan;\">T</span><span class=\"mord mathnormal\" style=\"color:cyan;\">h</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">a</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;color:cyan;\">R</span><span class=\"mord mathnormal\" style=\"color:cyan;\">u</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">a</span><span class=\"mord mathnormal\" style=\"color:cyan;\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:cyan;\">l</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:cyan;\">g</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mpunct\" style=\"color:cyan;\">,</span><span class=\"mspace\" style=\"color:cyan;margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;color:cyan;\">S</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:cyan;\">g</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">a</span><span class=\"mord mathnormal\" style=\"color:cyan;\">m</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 创建新的 Thread 对象</li>\n</ul>\n</li>\n<li>API 中创建线程的两种方式\n<ul>\n<li>\n<p>继承 Thread 类的方式</p>\n<ul>\n<li><a href=\"Threadpractice3/ThreadTest.java\">&lt;font color=red&gt;《创建多线程的方式一：继承 Thread 类》&lt;/font&gt;</a></li>\n<li><a href=\"Threadpractice3/ThreadDemo.java\">&lt;font color=red&gt; 练习：创建两个分线程，其中一个遍历 100 以内的偶数，另一个遍历 100 以内的奇数 &lt;/font&gt;</a></li>\n<li><a href=\"Threadpractice3/ThreadModeTest.java\">&lt;font color=red&gt;Thread 类的有关方法 &lt;/font&gt;</a>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{start()}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"color:cyan;\">s</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 启动当前线程，执行当前线程的 run ()</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>r</mi><mi>u</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{run()}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"color:cyan;\">u</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 通常需要重写 Thread 类中的此方法，将创建的线程要执行的操作声明在此方法中</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>T</mi><mi>h</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{currentThread()}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"color:cyan;\">c</span><span class=\"mord mathnormal\" style=\"color:cyan;\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:cyan;\">T</span><span class=\"mord mathnormal\" style=\"color:cyan;\">h</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">a</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 静态方法，返回当前代码执行的线程</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>g</mi><mi>e</mi><mi>t</mi><mi>N</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{getName()}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:cyan;\">g</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:cyan;\">N</span><span class=\"mord mathnormal\" style=\"color:cyan;\">a</span><span class=\"mord mathnormal\" style=\"color:cyan;\">m</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 获取当前线程的名字</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>s</mi><mi>e</mi><mi>t</mi><mi>N</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{setName()}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"color:cyan;\">s</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:cyan;\">N</span><span class=\"mord mathnormal\" style=\"color:cyan;\">a</span><span class=\"mord mathnormal\" style=\"color:cyan;\">m</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 设置当前线程的名字</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>y</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{yield()}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:cyan;\">y</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:cyan;\">l</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 释放当前 CPU 的执行权</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>j</mi><mi>o</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{join()}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;color:cyan;\">j</span><span class=\"mord mathnormal\" style=\"color:cyan;\">o</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 在线程 a 中调用线程 b 的 join (), 此时线程 a 就进入阻塞状态，直到线程 b 完全执行完以后，线程 a 才结束阻塞状态</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>s</mi><mi>t</mi><mi>o</mi><mi>p</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{stop()}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"color:cyan;\">s</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">o</span><span class=\"mord mathnormal\" style=\"color:cyan;\">p</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 已过时。当执行此方法时，强制结束当前线程。</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>s</mi><mi>e</mi><mi>l</mi><mi>l</mi><mi>p</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>n</mi><mi>g</mi><mi>m</mi><mi>i</mi><mi>l</mi><mi>l</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{sellp(long millitime)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"color:cyan;\">s</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:cyan;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:cyan;\">l</span><span class=\"mord mathnormal\" style=\"color:cyan;\">p</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:cyan;\">l</span><span class=\"mord mathnormal\" style=\"color:cyan;\">o</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:cyan;\">g</span><span class=\"mord mathnormal\" style=\"color:cyan;\">m</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:cyan;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:cyan;\">l</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">m</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 让当前线程 “睡眠” 指定时间的 millitime 毫秒)。在指定的 millitime 毫秒时间内，当前线程是阻塞状态的。</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>i</mi><mi>s</mi><mi>A</mi><mi>l</mi><mi>i</mi><mi>v</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{isAlive()}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">s</span><span class=\"mord mathnormal\" style=\"color:cyan;\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:cyan;\">l</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:cyan;\">v</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 返回 boolean，判断线程是否还活着</li>\n</ul>\n</li>\n<li>线程的调度\n<ul>\n<li>抢占式：高优先级的线程抢占 CPU</li>\n<li>同优先级线程组成先进先出队列（先到先服务），使用时间片策略</li>\n<li>对高优先级，使用优先调度的抢占式策略</li>\n</ul>\n</li>\n<li NORM_PRIORITY:=\"\" 5=\"\">线程的优先级\n<ul>\n<li MAX_PRIORITY:=\"\" 10=\"\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"></span></span></li>\n<li MIN_PRIORITY:=\"\" 1=\"\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"></span></span></li>\n</ul>\n</li>\n<li>涉及的方法\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>g</mi><mi>e</mi><mi>t</mi><mi>P</mi><mi>r</mi><mi>i</mi><mi>o</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{getPriority()}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:cyan;\">g</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:cyan;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:cyan;\">y</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 返回线程优先值</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>s</mi><mi>e</mi><mi>t</mi><mi>P</mi><mi>r</mi><mi>i</mi><mi>o</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mi>n</mi><mi>t</mi><mi>n</mi><mi>e</mi><mi>w</mi><mi>P</mi><mi>r</mi><mi>i</mi><mi>o</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{setPriority(intnewPriority)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"color:cyan;\">s</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:cyan;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:cyan;\">y</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;color:cyan;\">w</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:cyan;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:cyan;\">y</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 改变线程的优先级</li>\n<li>== 注：== 高优先级的线程要抢占低优先级线程 cpu 的执行权。<br />\n但是只是从概率上讲，高优先级的线程高概率的情况下被执行。<br />\n并不意味着只有当高优先级的线程执行完以后，低优先级的线程才会被执行</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"/images/2022-10-22-11-40-02.png\" alt=\"\" /><br />\n<img data-src=\"/images/2022-10-22-11-30-44.png\" alt=\"\" /></p>\n</li>\n<li>\n<p><a href=\"Threadpractice3/ThreadTest1.java\">&lt;font color=red&gt; 实现 Runnable 接口的方式 &lt;/font&gt;</a></p>\n<ul>\n<li>1. 创建一个实现了 Runnable 接口得类</li>\n<li>2. 实现类去实现 Runnable 中的抽象方法:run ()</li>\n<li>3. 创建实现类的对象</li>\n<li>4. 将此对象作为参数传递到 Thread 类的构造器中，创建 Thread 类的对象</li>\n<li>5. 通过 Thread 类的对象调用 start ()</li>\n</ul>\n</li>\n<li>\n<p>继承方式和实现方式的联系与区别</p>\n<ul>\n<li>开发中：优先选择：实现 Runnable 接口的方式\n<ul>\n<li>原因：1. 实现的方式没有类的单继承性的局限性<br />\n 2. 实现的方式更适合来处理多个线程有共享数据的情况。</li>\n</ul>\n</li>\n<li>相同点：两种方式都需要重写 run (), 将线程要执行的逻辑声明在 run () 中。</li>\n</ul>\n</li>\n<li>\n<p>补充：线程的分类</p>\n<blockquote>\n<p>ava 中的线程分为两类：一种是守护线程，一种是用户线程。<br />\n它们在几乎每个方面都是相同的，唯一的区别是判断 JVM 何时离开。<br />\n守护线程是用来服务用户线程的，通过在 start () 方法前调用 **thread.setDaemon (true)** 可以把一个用户线程变成一个守护线程。<br />\nJava 垃圾回收就是一个典型的守护线程。<br />\n若 JVM 中都是守护线程，当前 JVM 将退出。<br />\n形象理解：兔死狗烹，鸟尽弓藏</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"线程的生命周期\"><a class=\"anchor\" href=\"#线程的生命周期\">#</a> 线程的生命周期</h3>\n<ul>\n<li>新建：当一个 Thread 类或其子类的对象被声明并创建时，新生的线程对象处于新建状态</li>\n<li>就绪：处于新建状态的线程被 start () 后，将进入线程队列等待 CPU 时间片，此时它已具备了运行的条件，只是没分配到 CPU 资源</li>\n<li>运行：当就绪的线程被调度并获得 CPU 资源时，便进入运行状态，run () 方法定义了线程的操作和功能</li>\n<li>阻塞：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 CPU 并临时中止自己的执行，进入阻塞状态</li>\n<li>死亡：线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束</li>\n</ul>\n<p><img data-src=\"/images/2022-10-22-11-16-54.png\" alt=\"\" /></p>\n<ul>\n<li>线程的同步\n<ul>\n<li>多个线程执行操作造成结果的不确定性</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"同步代码块处理实现runnable的线程安全问题\"><a class=\"anchor\" href=\"#同步代码块处理实现runnable的线程安全问题\">#</a> 同步代码块处理实现 Runnable 的线程安全问题</h3>\n<ul>\n<li>\n<p>方式一：同步代码块<br />\n synchronized (同步监视器){<br />\n// 需要被同步的代码</p>\n<p>}</p>\n</li>\n<li>\n<p>方式二：同步方法<br />\n如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的</p>\n</li>\n<li>\n<p>优点：解决了线程的安全问题</p>\n</li>\n<li>\n<p>缺点：操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  例子：创建三个窗口卖票，总票数为100张.使用实现Runnable接口的方式</span></span><br><span class=\"line\"><span class=\"comment\">*  1.卖票过程中出现重票、错票 ---》出现了线程的安全问题</span></span><br><span class=\"line\"><span class=\"comment\">*  2.问题出现的原因:当某个线程操作车票的过程中，尚未操作完成时，其他线程参与进来，也操作车票</span></span><br><span class=\"line\"><span class=\"comment\">*  3.如何解决：当一个线程在操作ticket的时候，其他线程不能参与进来。直到线程a操作完ticket时，其他</span></span><br><span class=\"line\"><span class=\"comment\">*            线程才可以操作ticket。这种情况即使线程a出现了阻塞，也不能被改变。</span></span><br><span class=\"line\"><span class=\"comment\">*  4.在java中，我们通过同步机制，来解决线程的安全问题。</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*  方式一：同步代码块</span></span><br><span class=\"line\"><span class=\"comment\">*  synchronized(同步监视器)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">*      //需要被同步的代码</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*  说明：1.操作共享数据的代码，即为需要被同步的代码 ---&gt;不能包含代码多了，也不能包含代码少了。</span></span><br><span class=\"line\"><span class=\"comment\">*       2.共享数据：多个线程共同操作的变量。比如：ticket就是共享数据</span></span><br><span class=\"line\"><span class=\"comment\">*       3.同步监视器，俗称：锁。任何一个类的对象，都可以来充当锁。</span></span><br><span class=\"line\"><span class=\"comment\">*          要求：多个线程必须要共用同一把锁。</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*       补充：在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*  方式二：同步方法</span></span><br><span class=\"line\"><span class=\"comment\">*      如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*  5.同步的方式，解决了线程的安全问题。---好处</span></span><br><span class=\"line\"><span class=\"comment\">*    操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。---局限性</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Windows1</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">ticket</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"comment\">//    Object obj = new Object();</span></span><br><span class=\"line\"><span class=\"comment\">//    Dog dog = new Dog();</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>) &#123;<span class=\"comment\">//此时的this:唯一的windows1的对象 //方式二:synchronized (dog) &#123;</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ticket &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                        Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;:卖票，票号为: &quot;</span> + ticket);</span><br><span class=\"line\">                    ticket--;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WindowsTest1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Windows1</span> <span class=\"variable\">w</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Windows1</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(w);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(w);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(w);</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.setName(<span class=\"string\">&quot;窗口1&quot;</span>);</span><br><span class=\"line\">        t2.setName(<span class=\"string\">&quot;窗口2&quot;</span>);</span><br><span class=\"line\">        t3.setName(<span class=\"string\">&quot;窗口3&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h3 id=\"同步代码块处理继承thread类的线程安全问题\"><a class=\"anchor\" href=\"#同步代码块处理继承thread类的线程安全问题\">#</a> 同步代码块处理继承 Thread 类的线程安全问题</h3>\n<ul>\n<li>\n<p>详情见代码</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用同步代码块解决继承Thread类的方式的线程安全问题</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 例子：创建三个c窗口卖票，总票数为100张</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Windows</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">ticket</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//正确的</span></span><br><span class=\"line\"><span class=\"comment\">//            synchronized (obj) &#123;</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Windows.class)&#123;   <span class=\"comment\">//Class clazz = Windows.class</span></span><br><span class=\"line\">            <span class=\"comment\">//错误的，因为此时this表示的是t1,t2,t3三个对象</span></span><br><span class=\"line\"><span class=\"comment\">//            synchronized (this) &#123;</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ticket &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    System.out.println(getName() + <span class=\"string\">&quot;:卖票，票号为: &quot;</span> + ticket);</span><br><span class=\"line\">                    ticket--;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WindowsTest2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Windows</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Windows</span>();</span><br><span class=\"line\">        <span class=\"type\">Windows</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Windows</span>();</span><br><span class=\"line\">        <span class=\"type\">Windows</span> <span class=\"variable\">t3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Windows</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.setName(<span class=\"string\">&quot;窗口1&quot;</span>);</span><br><span class=\"line\">        t2.setName(<span class=\"string\">&quot;窗口2&quot;</span>);</span><br><span class=\"line\">        t3.setName(<span class=\"string\">&quot;窗口3&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h3 id=\"同步方法处理实现runnable的线程安全问题\"><a class=\"anchor\" href=\"#同步方法处理实现runnable的线程安全问题\">#</a> 同步方法处理实现 Runnable 的线程安全问题</h3>\n<ul>\n<li>详情见代码<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用同步方法解决实现Runnable接口的线程安全问题</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 关于同步方法的总结:</span></span><br><span class=\"line\"><span class=\"comment\"> *  1. 同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。</span></span><br><span class=\"line\"><span class=\"comment\"> *  2. 非静态的同步方法，同步监视器是：this</span></span><br><span class=\"line\"><span class=\"comment\"> *     静态的同步方法，同步监视器是：当前类本身</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Windows3</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">ticket</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span> &#123; <span class=\"comment\">//同步监视器:this</span></span><br><span class=\"line\"><span class=\"comment\">//        synchronized (this)&#123;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ticket &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;:卖票，票号为: &quot;</span> + ticket);</span><br><span class=\"line\">                ticket--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WindowsTest3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Windows3</span> <span class=\"variable\">w3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Windows3</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(w3);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(w3);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(w3);</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.setName(<span class=\"string\">&quot;窗口1&quot;</span>);</span><br><span class=\"line\">        t2.setName(<span class=\"string\">&quot;窗口2&quot;</span>);</span><br><span class=\"line\">        t3.setName(<span class=\"string\">&quot;窗口3&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"常用类\"><a class=\"anchor\" href=\"#常用类\">#</a> 常用类</h1>\n<h3 id=\"string类的概述\"><a class=\"anchor\" href=\"#string类的概述\">#</a> String 类的概述</h3>\n<ul>\n<li>String 的使用\n<ol>\n<li>String: 字符串，使用一对 “” 引起来表示。</li>\n<li>String 声明为 final 的，不可被继承</li>\n<li>String 实现了 Serializable 接口：表示字符串是支持序列化的。  实现了 Comparable 接口：表示 String 可以比较大小</li>\n<li>String 内部定义了 final char [] value 用于存储字符串数据</li>\n<li>String: 代表不可变的字符序列。简称：不可变性。\n<ol>\n<li>当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的 value 进行赋值。</li>\n<li>当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的 value 进行赋值。</li>\n<li>当调用 String 的 replace () 方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的 value 进行赋值。</li>\n</ol>\n</li>\n<li>通过字面量的方式（区别于 new）给一个字符串赋值，此时的字符串值声明在字符串常量池中。</li>\n<li>字符串常量池中是不会存储相同内容的字符串的。<br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">Test1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abc&quot;</span>;  <span class=\"comment\">//字面量的定义方式</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">        s1 = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(s1 == s2);<span class=\"comment\">//比较s1和s2的地址值</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(s1);<span class=\"comment\">//hello</span></span><br><span class=\"line\">        System.out.println(s2);<span class=\"comment\">//abc</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*********************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s3</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">        s3 += <span class=\"string\">&quot;def&quot;</span>;</span><br><span class=\"line\">        System.out.println(s3);<span class=\"comment\">//abcdef</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**********************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s4</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s5</span> <span class=\"operator\">=</span> s4.replace(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;m&#x27;</span>);</span><br><span class=\"line\">        System.out.println(s4);<span class=\"comment\">//abc</span></span><br><span class=\"line\">        System.out.println(s5);<span class=\"comment\">//mbc</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n<img data-src=\"/images/2022-10-22-11-13-40.png\" alt=\"\" /></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"string不同实例化方式的对比1\"><a class=\"anchor\" href=\"#string不同实例化方式的对比1\">#</a> String 不同实例化方式的对比 1</h3>\n<ol>\n<li>String 对象的创建<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//本质上this.value = new char[0];</span></span><br><span class=\"line\"> <span class=\"type\">String</span>  <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(); </span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//this.value = original.value;</span></span><br><span class=\"line\"> <span class=\"type\">String</span>  <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(String original); </span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//this.value = Arrays.copyOf(value, value.length);</span></span><br><span class=\"line\"> <span class=\"type\">String</span>  <span class=\"variable\">s3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"type\">char</span>[] a);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"type\">String</span>  <span class=\"variable\">s4</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"type\">char</span>[] a,<span class=\"type\">int</span> startIndex,<span class=\"type\">int</span> count);</span><br></pre></td></tr></table></figure><br />\n<img data-src=\"/images/2022-10-22-11-12-28.png\" alt=\"\" /></li>\n</ol>\n<h3 id=\"font-colorredstring不同拼接操作的对比font\"><a class=\"anchor\" href=\"#font-colorredstring不同拼接操作的对比font\">#</a> <a href=\"Stringpractice4/StringTest.java\">&lt;font color=red&gt;String 不同拼接操作的对比 &lt;/font&gt;</a></h3>\n<ul>\n<li>String 使用陷阱<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> “a”; <span class=\"comment\">//1.说明：在字符串常量池中创建了一个字面量为&quot;a&quot;的字符串。</span></span><br><span class=\"line\"></span><br><span class=\"line\">s1 = s1 + “b”; <span class=\"comment\">//2.说明：实际上原来的“a”字符串对象已经丢弃了，现在在堆空间中产生了一个字符串s1+“b”（也就是&quot;ab&quot;)。如果多次执行这些改变串内容的操作，会导致大量副本字符串对象存留在内存中，降低效率。如果这样的操作放到循环中，会极大影响程序的性能。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> “ab”;<span class=\"comment\">//说明：直接在字符串常量池中创建一个字面量为&quot;ab&quot;的字符串。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s3</span> <span class=\"operator\">=</span> “a” + “b”; <span class=\"comment\">//说明：s3指向字符串常量池中已经创建的&quot;ab&quot;的字符串。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s4</span> <span class=\"operator\">=</span> s1.intern();  <span class=\"comment\">//说明：堆空间的s1对象在调用intern()之后，会将常量池中已经存在的&quot;ab&quot;字符串赋值给s4</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"枚举类和注解的使用\"><a class=\"anchor\" href=\"#枚举类和注解的使用\">#</a> 枚举类和注解的使用</h1>\n<h3 id=\"枚举类的理解\"><a class=\"anchor\" href=\"#枚举类的理解\">#</a> 枚举类的理解</h3>\n<ul>\n<li>\n<p>类的对象只有有限个，确定的。举例如下：</p>\n<ul>\n<li>星期：Monday (星期一)、…、Sunday (星期天)</li>\n<li>性别：Man (男)、Woman (女)</li>\n<li>季节：Spring (春节)…Winter (冬天)</li>\n<li>支付方式：Cash（现金）、WeChatPay（微信）、Alipay (支付宝)、BankCard (银行卡)、CreditCard (信用卡)</li>\n<li>就职状态：Busy、Free、Vocation、Dimission</li>\n<li>订单状态：Nonpayment（未付款）、Paid（已付款）、Delivered（已发货）、Return（退货）、Checked（已确认）Fulfilled（已配货）、</li>\n<li>线程状态：创建、就绪、运行、阻塞、死亡</li>\n</ul>\n</li>\n<li>\n<p>当需要定义一组常量时，强烈建议使用枚举类</p>\n</li>\n<li>\n<p>枚举类的实现：</p>\n<ul>\n<li>JDK1.5 之前需要自定义枚举类</li>\n<li>JDK 1.5 新增的 enum 关键字用于定义枚举类</li>\n</ul>\n</li>\n<li>\n<p>若枚举只有一个对象，则可以作为一种单例模式的实现方式。</p>\n</li>\n</ul>\n<h3 id=\"自定义枚举类\"><a class=\"anchor\" href=\"#自定义枚举类\">#</a> 自定义枚举类</h3>\n<ul>\n<li>枚举类的属性：\n<ul>\n<li>枚举类对象的属性不应允许被改动，所以应该使用 private final 修饰</li>\n<li>枚举类的使用 private final 修饰的属性应该在构造器中为其赋值</li>\n<li>若枚举类显式的定义了带参数的构造器，则在列出枚举值时也必须对应的传入参数<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SeasonTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Season</span> <span class=\"variable\">spring</span> <span class=\"operator\">=</span> Season.SPRING;</span><br><span class=\"line\">        System.out.println(spring);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//自定义枚举类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Season</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.声明Season对象的属性:private final修饰</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String seasonName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String seasonDesc;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2.私有化类的构造器,并给对象属性赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Season</span><span class=\"params\">(String seasonName,String seasonDesc)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.seasonName = seasonName;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.seasonDesc = seasonDesc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3.提供当前枚举类的多个对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Season</span> <span class=\"variable\">SPRING</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Season</span>(<span class=\"string\">&quot;春天&quot;</span>,<span class=\"string\">&quot;万物复苏&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Season</span> <span class=\"variable\">SUMMER</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Season</span>(<span class=\"string\">&quot;夏天&quot;</span>,<span class=\"string\">&quot;烈日炎炎&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Season</span> <span class=\"variable\">AUTUMN</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Season</span>(<span class=\"string\">&quot;秋天&quot;</span>,<span class=\"string\">&quot;金秋送爽&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Season</span> <span class=\"variable\">WINTER</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Season</span>(<span class=\"string\">&quot;冬天&quot;</span>,<span class=\"string\">&quot;白雪皑皑&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//4.其他诉求：获取枚举类对象的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getSeasonName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> seasonName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getSeasonDesc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> seasonDesc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//4.其他诉求1：提供toString()</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Season&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;seasonName=&#x27;&quot;</span> + seasonName + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, seasonDesc=&#x27;&quot;</span> + seasonDesc + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用enum关键字定义枚举类\"><a class=\"anchor\" href=\"#使用enum关键字定义枚举类\">#</a> 使用 enum 关键字定义枚举类</h3>\n<ul>\n<li>使用说明\n<ul>\n<li>使用 enum 定义的枚举类默认继承了 java.lang.Enum 类，因此不能再继承其他类</li>\n<li>枚举类的构造器只能使用 private 权限修饰符</li>\n<li>枚举类的所有实例必须在枚举类中显式列出 (, 分隔；结尾)。列出的实例系统会自动添加 public static final 修饰</li>\n<li>必须在枚举类的第一行声明枚举类对象<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用enum关键字定义枚举类</span></span><br><span class=\"line\"><span class=\"comment\"> * 说明：定义的枚举类默认继承于java.lang.Enum类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SeasonTest1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Season1</span> <span class=\"variable\">summer</span> <span class=\"operator\">=</span> Season1.SUMMER;</span><br><span class=\"line\">        <span class=\"comment\">//toString():</span></span><br><span class=\"line\">        System.out.println(summer.toString());</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(Season1.class.getSuperclass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用enum关键字枚举类</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Season1</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.提供当前枚举类的对象，多个对象之间用&quot;,&quot;隔开，末尾对象&quot;;&quot;结束</span></span><br><span class=\"line\">    SPRING(<span class=\"string\">&quot;春天&quot;</span>,<span class=\"string\">&quot;万物复苏&quot;</span>),</span><br><span class=\"line\">    SUMMER(<span class=\"string\">&quot;夏天&quot;</span>,<span class=\"string\">&quot;烈日炎炎&quot;</span>),</span><br><span class=\"line\">    AUTUMN(<span class=\"string\">&quot;秋天&quot;</span>,<span class=\"string\">&quot;金秋送爽&quot;</span>),</span><br><span class=\"line\">    WINTER(<span class=\"string\">&quot;冬天&quot;</span>,<span class=\"string\">&quot;白雪皑皑&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2.声明Season对象的属性:private final修饰</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String seasonName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String seasonDesc;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3.私有化类的构造器,并给对象属性赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Season1</span><span class=\"params\">(String seasonName,String seasonDesc)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.seasonName = seasonName;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.seasonDesc = seasonDesc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//4.其他诉求：获取枚举类对象的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getSeasonName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> seasonName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getSeasonDesc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> seasonDesc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//4.其他诉求1：提供toString()</span></span><br><span class=\"line\"><span class=\"comment\">//    @Override</span></span><br><span class=\"line\"><span class=\"comment\">//    public String toString() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        return &quot;Season&#123;&quot; +</span></span><br><span class=\"line\"><span class=\"comment\">//                &quot;seasonName=&#x27;&quot; + seasonName + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\">//                &quot;, seasonDesc=&#x27;&quot; + seasonDesc + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\">//                &#x27;&#125;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"eunum类中的常用方法\"><a class=\"anchor\" href=\"#eunum类中的常用方法\">#</a> eunum 类中的常用方法</h3>\n<p><img data-src=\"/images/2022-10-22-11-08-22.png\" alt=\"\" /></p>\n<ul>\n<li>enum 类的主要方法\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{values()}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:cyan;\">v</span><span class=\"mord mathnormal\" style=\"color:cyan;\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:cyan;\">l</span><span class=\"mord mathnormal\" style=\"color:cyan;\">u</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">s</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mi>O</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>s</mi><mi>t</mi><mi>r</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{valueOf(String str)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:cyan;\">v</span><span class=\"mord mathnormal\" style=\"color:cyan;\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:cyan;\">l</span><span class=\"mord mathnormal\" style=\"color:cyan;\">u</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;color:cyan;\">f</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;color:cyan;\">S</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:cyan;\">g</span><span class=\"mord mathnormal\" style=\"color:cyan;\">s</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的 “名字”。如不是，会有运行时异常：IllegalArgumentException。</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>t</mi><mi>o</mi><mi>S</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{toString()}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;color:cyan;\">S</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:cyan;\">g</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 返回当前枚举类对象常量的名称<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SeasonTest1</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Season1</span> <span class=\"variable\">summer</span> <span class=\"operator\">=</span> Season1.SUMMER;</span><br><span class=\"line\">        <span class=\"comment\">//toString():</span></span><br><span class=\"line\">        System.out.println(summer.toString());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(Season1.class.getSuperclass());</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//values():返回所有的枚举类对象构成的数组</span></span><br><span class=\"line\">        Season1[] values = Season1.values();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; values.length;i++)&#123;</span><br><span class=\"line\">            System.out.println(values[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;****************************&quot;</span>);</span><br><span class=\"line\">        Thread.State[] values1 = Thread.State.values();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; values1.length;i++)&#123;</span><br><span class=\"line\">            System.out.println(values1[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//valueOf(String objName):返回枚举类中对象名是objName的对象。</span></span><br><span class=\"line\">        <span class=\"type\">Season1</span> <span class=\"variable\">winter</span> <span class=\"operator\">=</span> Season1.valueOf(<span class=\"string\">&quot;WINTER&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//如果没有objName的枚举类对象，则抛异常：IllegalArgumentException</span></span><br><span class=\"line\"><span class=\"comment\">//        Season1 winter = Season1.valueOf(&quot;WINTER1&quot;);</span></span><br><span class=\"line\">        System.out.println(winter);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用enum关键字枚举类</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Season1</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.提供当前枚举类的对象，多个对象之间用&quot;,&quot;隔开，末尾对象&quot;;&quot;结束</span></span><br><span class=\"line\">    SPRING(<span class=\"string\">&quot;春天&quot;</span>,<span class=\"string\">&quot;万物复苏&quot;</span>),</span><br><span class=\"line\">    SUMMER(<span class=\"string\">&quot;夏天&quot;</span>,<span class=\"string\">&quot;烈日炎炎&quot;</span>),</span><br><span class=\"line\">    AUTUMN(<span class=\"string\">&quot;秋天&quot;</span>,<span class=\"string\">&quot;金秋送爽&quot;</span>),</span><br><span class=\"line\">    WINTER(<span class=\"string\">&quot;冬天&quot;</span>,<span class=\"string\">&quot;白雪皑皑&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2.声明Season对象的属性:private final修饰</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String seasonName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String seasonDesc;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3.私有化类的构造器,并给对象属性赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Season1</span><span class=\"params\">(String seasonName,String seasonDesc)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.seasonName = seasonName;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.seasonDesc = seasonDesc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//4.其他诉求：获取枚举类对象的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getSeasonName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> seasonName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getSeasonDesc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> seasonDesc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//4.其他诉求1：提供toString()</span></span><br><span class=\"line\"><span class=\"comment\">//    @Override</span></span><br><span class=\"line\"><span class=\"comment\">//    public String toString() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        return &quot;Season&#123;&quot; +</span></span><br><span class=\"line\"><span class=\"comment\">//                &quot;seasonName=&#x27;&quot; + seasonName + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\">//                &quot;, seasonDesc=&#x27;&quot; + seasonDesc + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\">//                &#x27;&#125;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用enum关键字定义的枚举类实现接口\"><a class=\"anchor\" href=\"#使用enum关键字定义的枚举类实现接口\">#</a> 使用 enum 关键字定义的枚举类实现接口</h3>\n<ul>\n<li>情况一：实现接口，在 enum 类中实现抽象方法</li>\n<li>情况二：让枚举类的对象分别实现接口中的抽象方法<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SeasonTest1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//values():返回所有的枚举类对象构成的数组</span></span><br><span class=\"line\">        Season1[] values = Season1.values();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; values.length;i++)&#123;</span><br><span class=\"line\">            System.out.println(values[i]);</span><br><span class=\"line\">            values[i].show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//valueOf(String objName):返回枚举类中对象名是objName的对象。</span></span><br><span class=\"line\">        <span class=\"type\">Season1</span> <span class=\"variable\">winter</span> <span class=\"operator\">=</span> Season1.valueOf(<span class=\"string\">&quot;WINTER&quot;</span>);</span><br><span class=\"line\">        winter.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Info</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用enum关键字枚举类</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Season1</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Info</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.提供当前枚举类的对象，多个对象之间用&quot;,&quot;隔开，末尾对象&quot;;&quot;结束</span></span><br><span class=\"line\">    SPRING(<span class=\"string\">&quot;春天&quot;</span>,<span class=\"string\">&quot;春暖花开&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;一元复始、万物复苏&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    SUMMER(<span class=\"string\">&quot;夏天&quot;</span>,<span class=\"string\">&quot;夏日炎炎&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;蝉声阵阵、烈日当空&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    AUTUMN(<span class=\"string\">&quot;秋天&quot;</span>,<span class=\"string\">&quot;秋高气爽&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;天高气清、金桂飘香&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    WINTER(<span class=\"string\">&quot;冬天&quot;</span>,<span class=\"string\">&quot;冰天雪地&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;寒冬腊月、滴水成冰&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2.声明Season对象的属性:private final修饰</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String seasonName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String seasonDesc;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3.私有化类的构造器,并给对象属性赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Season1</span><span class=\"params\">(String seasonName,String seasonDesc)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.seasonName = seasonName;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.seasonDesc = seasonDesc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//4.其他诉求：获取枚举类对象的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getSeasonName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> seasonName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getSeasonDesc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> seasonDesc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//4.其他诉求1：提供toString()</span></span><br><span class=\"line\"><span class=\"comment\">//    @Override</span></span><br><span class=\"line\"><span class=\"comment\">//    public String toString() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        return &quot;Season&#123;&quot; +</span></span><br><span class=\"line\"><span class=\"comment\">//                &quot;seasonName=&#x27;&quot; + seasonName + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\">//                &quot;, seasonDesc=&#x27;&quot; + seasonDesc + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\">//                &#x27;&#125;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    @Override</span></span><br><span class=\"line\"><span class=\"comment\">//    public void show() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;这是一个季节。&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"注解的理解\"><a class=\"anchor\" href=\"#注解的理解\">#</a> 注解的理解</h3>\n<p>   从 JDK 5.0 开始，Java 增加了对元数据 (MetaData) 的支持，也就是 Annotation (注解)<br />\n   Annotation 其实就是代码里的特殊标记，这些标记可以在编译，类加载，运行时被读取，并执行相应的处理。通过使用 Annotation, 程序员可以在不改变原有逻辑的情况下，在源文件中嵌入一些补充信息。代码分析工具、开发工具和部署工具可以通过这些补充信息进行验证或者进行部署。<br />\n   Annotation 可以像修饰符一样被使用，可用于修饰包，类，构造器，方法，成员变量，参数，局部变量的声明，这些信息被保存在 Annotation 的 “name=value” 对中。<br />\n   在 JavaSE 中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在 JavaEE/Android 中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替 JavaEE 旧版中所遗留的繁冗代码和 XML 配置等。<br />\n   未来的开发模式都是基于注解的，JPA 是基于注解的，Spring2.5 以上都是基于注解的，Hibernate3.x 以后也是基于注解的，现在的 Struts2 有一部分也是基于注解的了，注解是一种趋势，一定程度上可以说：框架 = 注解 + 反射 + 设计模式。</p>\n<h3 id=\"annotaton的使用示例\"><a class=\"anchor\" href=\"#annotaton的使用示例\">#</a> Annotaton 的使用示例</h3>\n<p><img data-src=\"/images/2022-10-22-11-06-58.png\" alt=\"\" /></p>\n<ul>\n<li>① jdk 5.0 新增的功能</li>\n<li>Annotation 其实就是代码里的特殊标记，这些标记可以在编译，类加载，运行时被读取，并执行相应的处理。通过使用 Annotation,<br />\n 程序员可以在不改变原有逻辑的情况下，在源文件中嵌入一些补充信息。</li>\n<li>③在 JavaSE 中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在 JavaEE/Android</li>\n</ul>\n<h3 id=\"如何自定义注解\"><a class=\"anchor\" href=\"#如何自定义注解\">#</a> 如何自定义注解</h3>\n<ul>\n<li>定义新的 Annotation 类型使用 **@interface** 关键字</li>\n<li>自定义注解自动继承了<strong> java.lang.annotation.Annotation</strong> 接口</li>\n<li>如果只有一个参数成员，建议使用参数名为 value</li>\n<li>如果定义的注解含有配置参数，那么使用时必须指定参数值，除非它有默认值。格式是 “参数名 = 参数值”，如果只有一个参数成员，且名称为 value，可以省略 “value=”</li>\n<li>没有成员定义的 Annotation 称为标记；包含成员变量的 Annotation 称为元数据 Annotation<br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 注解的使用</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*  3.如何自定义注解：参照<span class=\"doctag\">@SuppressWarnings</span>定义</span></span><br><span class=\"line\"><span class=\"comment\">*      ① 注解声明为：<span class=\"doctag\">@interface</span></span></span><br><span class=\"line\"><span class=\"comment\">*      ② 内部定义成员，通常使用value表示</span></span><br><span class=\"line\"><span class=\"comment\">*      ③ 可以指定成员的默认值，使用default定义</span></span><br><span class=\"line\"><span class=\"comment\">*      ④ 如果自定义注解没有成员，表明是一个标识作用。</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*      如果注解有成员，在使用注解时，需要指明成员的值。</span></span><br><span class=\"line\"><span class=\"comment\">*      自定义注解必须配上注解的信息处理流程(使用反射)才有意义。</span></span><br><span class=\"line\"><span class=\"comment\">*      自定义注解通过都会指明两个元注解：Retention、Target</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@MyAnnotation(value = &quot;hello&quot;)</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"jdk中4个基本的元注解的使用1\"><a class=\"anchor\" href=\"#jdk中4个基本的元注解的使用1\">#</a> jdK 中 4 个基本的元注解的使用 1</h3>\n<ul>\n<li><img data-src=\"/images/2022-10-22-11-02-32.png\" alt=\"\" /><br />\n<img data-src=\"/images/2022-10-22-11-02-56.png\" alt=\"\" /><br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 注解的使用</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*   4.jdk 提供的4种元注解</span></span><br><span class=\"line\"><span class=\"comment\">*     元注解：对现有的注解进行解释说明的注解</span></span><br><span class=\"line\"><span class=\"comment\">*     Retention:指定所修饰的 Annotation 的生命周期：SOURCE\\CLASS（默认行为）\\RUNTIME</span></span><br><span class=\"line\"><span class=\"comment\">*               只有声明为RUNTIME生命周期的注解，才能通过反射获取。</span></span><br><span class=\"line\"><span class=\"comment\">*     Target:</span></span><br><span class=\"line\"><span class=\"comment\">*     Documented:</span></span><br><span class=\"line\"><span class=\"comment\">*     Inherited:</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnnotationTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@MyAnnotation(value = &quot;hello&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MyAnnotation(value = &quot;jack&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">walk</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;学习中……&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;摸鱼中……&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"jdk中4个基本的元注解的使用2\"><a class=\"anchor\" href=\"#jdk中4个基本的元注解的使用2\">#</a> jdk 中 4 个基本的元注解的使用 2</h3>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi mathvariant=\"normal\">@</mi><mi>T</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{@Target}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord\" style=\"color:cyan;\">@</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:cyan;\">T</span><span class=\"mord mathnormal\" style=\"color:cyan;\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:cyan;\">g</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span></span></span></span></span>: 用于修饰 Annotation 定义，用于指定被修饰的 Annotation 能用于修饰哪些程序元素。@Target 也包含一个名为 value 的成员变量。</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi mathvariant=\"normal\">@</mi><mi>D</mi><mi>o</mi><mi>c</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{@Documented}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord\" style=\"color:cyan;\">@</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">D</span><span class=\"mord mathnormal\" style=\"color:cyan;\">o</span><span class=\"mord mathnormal\" style=\"color:cyan;\">c</span><span class=\"mord mathnormal\" style=\"color:cyan;\">u</span><span class=\"mord mathnormal\" style=\"color:cyan;\">m</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span></span></span></span></span>: 用于指定被该元 Annotation 修饰的 Annotation 类将被 javadoc 工具提取成文档。默认情况下，javadoc 是不包括注解的。</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi mathvariant=\"normal\">@</mi><mi>I</mi><mi>n</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{@Inherited}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord\" style=\"color:cyan;\">@</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;color:cyan;\">I</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">h</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span></span></span></span></span>: 被它修饰的 Annotation 将具有继承性。如果某个类使用了被 @Inherited 修饰的 Annotation, 则其子类将自动具有该注解。</li>\n</ul>\n<p><img data-src=\"/images/2022-10-22-10-59-03.png\" alt=\"\" /><br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Annotation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnnotationTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testGetAnnotation</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Student.class;</span><br><span class=\"line\">        Annotation[] annotations = clazz.getAnnotations();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; annotations.length;i++)&#123;</span><br><span class=\"line\">            System.out.println(annotations[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@MyAnnotation(value = &quot;hello&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MyAnnotation</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MyAnnotation</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">walk</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;学习中……&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;摸鱼中……&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE,TYPE_PARAMETER,TYPE_USE&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;book&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr />\n<h1 id=\"集合\"><a class=\"anchor\" href=\"#集合\">#</a> 集合</h1>\n<h3 id=\"集合框架与数组的对比及概述\"><a class=\"anchor\" href=\"#集合框架与数组的对比及概述\">#</a> 集合框架与数组的对比及概述</h3>\n<ul>\n<li>集合的框架\n<ul>\n<li>集合：数组都是对多个数据进行存储操作的结构，简称 Java 容器。</li>\n</ul>\n</li>\n<li>数组在存储多个数据封面的特点：\n<ul>\n<li>》一旦初始化以后，它的长度就确定了。<br />\n》数组一旦定义好，它的数据类型也就确定了。我们就只能操作指定类型的数据了。<br />\n比如：String [] arr;int [] str;</li>\n</ul>\n</li>\n<li>数组在存储多个数据方面的特点：\n<ol>\n<li>一旦初始化以后，其长度就不可修改。</li>\n<li>数组中提供的方法非常有限，对于添加、删除、插入数据等操作，非常不便，同时效率不高。</li>\n<li>获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用</li>\n<li>数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"集合框架涉及到的api\"><a class=\"anchor\" href=\"#集合框架涉及到的api\">#</a> 集合框架涉及到的 API</h3>\n<ul>\n<li>Java 集合分为 Collection 和 Map 两种体系\n<ul>\n<li>Collection 接口：单列数据，定义了存取一组对象的方法的集合\n<ul>\n<li>List：元素有序、可重复的集合</li>\n<li>Set：元素无序、不可重复的集合</li>\n</ul>\n</li>\n<li>Map 接口：双列数据，保存具有映射关系 “key-value 对” 的集合<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* 二、集合框架</span></span><br><span class=\"line\"><span class=\"comment\">*      &amp;---Collection接口：单列集合，用来存储一个一个的对象</span></span><br><span class=\"line\"><span class=\"comment\">*          &amp;---List接口：存储有序的、可重复的数据。  --&gt;“动态”数组</span></span><br><span class=\"line\"><span class=\"comment\">*              &amp;---ArrayList、LinkedList、Vector</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*          &amp;---Set接口：存储无序的、不可重复的数据   --&gt;高中讲的“集合”</span></span><br><span class=\"line\"><span class=\"comment\">*              &amp;---HashSet、LinkedHashSet、TreeSet</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*      &amp;---Map接口：双列集合，用来存储一对(key - value)一对的数据   --&gt;高中函数：y = f(x)</span></span><br><span class=\"line\"><span class=\"comment\">*          &amp;---HashMap、LinkedHashMap、TreeMap、Hashtable、Properties</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>1.Collection 接口继承树</p>\n<p><img data-src=\"/images/2022-10-22-10-57-31.png\" alt=\"\" /></p>\n<p>2.map 接口继承树</p>\n<p><img data-src=\"/images/2022-10-22-10-56-46.png\" alt=\"\" /></p>\n<h3 id=\"collection-接口方法\"><a class=\"anchor\" href=\"#collection-接口方法\">#</a> Collection 接口方法</h3>\n<p>Collection 接口是 List、Set 和 Queue 接口的父接口，该接口里定义的方法既可用于操作 Set 集合，也可用于操作 List 和 Queue 集合。<br />\nJDK 不提供此接口的任何直接实现，而是提供更具体的子接口 (如：Set 和 List) 实现。<br />\n在 Java5 之前，Java 集合会丢失容器中所有对象的数据类型，把所有对象都当成 Object 类型处理；从 JDK 5.0 增加了泛型以后，Java 集合可以记住容器中对象的数据类型。</p>\n<h5 id=\"font-colorredcollection接口中的常用方法1font\"><a class=\"anchor\" href=\"#font-colorredcollection接口中的常用方法1font\">#</a> <a href=\"Collectionpractice5/CollectinoTest.java\">&lt;font color=red&gt;Collection 接口中的常用方法 1&lt;/font&gt;</a></h5>\n<h5 id=\"font-colorredcollection接口中的常用方法2font\"><a class=\"anchor\" href=\"#font-colorredcollection接口中的常用方法2font\">#</a> <a href=\"Collectionpractice5/CollectinoTest1.java\">&lt;font color=red&gt;Collection 接口中的常用方法 2&lt;/font&gt;</a></h5>\n<h5 id=\"font-colorredcollection接口中的常用方法3font\"><a class=\"anchor\" href=\"#font-colorredcollection接口中的常用方法3font\">#</a> <a href=\"Collectionpractice5/CollectionTest2.java\">&lt;font color=red&gt;Collection 接口中的常用方法 3&lt;/font&gt;</a></h5>\n<h5 id=\"font-colorredcollection接口中的常用方法4font\"><a class=\"anchor\" href=\"#font-colorredcollection接口中的常用方法4font\">#</a> <a href=\"Collectionpractice5/CollectinoTest3.java\">&lt;font color=red&gt;Collection 接口中的常用方法 4&lt;/font&gt;</a></h5>\n<h3 id=\"iterator迭代器接口\"><a class=\"anchor\" href=\"#iterator迭代器接口\">#</a> Iterator 迭代器接口</h3>\n<ul>\n<li>Collection 接口继承了 java.lang.Iterable 接口，该接口有一个 iterator () 方法，<br />\n那么所有实现了 Collection 接口的集合类都有一个 iterator () 方法，用以返回一个实<br />\n现了 Iterator 接口的对象。</li>\n<li>用于遍历 Collection 集合中元素</li>\n<li>集合对象每次调用 iterator () 方法都得到一个全新的迭代器对象，默认游标都在集<br />\n合的第一个元素之前。</li>\n</ul>\n<p><img data-src=\"/images/2022-10-22-10-46-22.png\" alt=\"\" /></p>\n<h5 id=\"font-colorred使用iterator遍历collectionfont\"><a class=\"anchor\" href=\"#font-colorred使用iterator遍历collectionfont\">#</a> <a href=\"Collectionpractice5/IteratorTest.java\">&lt;font color=red&gt; 使用 Iterator 遍历 Collection&lt;/font&gt;</a></h5>\n<p><img data-src=\"/images/2022-10-14-19-36-09.png\" alt=\"\" /></p>\n<ul>\n<li>Iterator 遍历集合的两种错误写法<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 集合元素的遍历操作，使用迭代器Iterator接口</span></span><br><span class=\"line\"><span class=\"comment\">* 1.内部的方法：hasNext()和 next()</span></span><br><span class=\"line\"><span class=\"comment\">* 2.集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IteratorTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Collection</span> <span class=\"variable\">coll</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">        coll.add(<span class=\"number\">123</span>);</span><br><span class=\"line\">        coll.add(<span class=\"number\">456</span>);</span><br><span class=\"line\">        coll.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;Jerry&quot;</span>,<span class=\"number\">20</span>));</span><br><span class=\"line\">        coll.add(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;Tom&quot;</span>));</span><br><span class=\"line\">        coll.add(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//错误方式一：</span></span><br><span class=\"line\"><span class=\"comment\">//        Iterator iterator = coll.iterator();</span></span><br><span class=\"line\"><span class=\"comment\">//        while(iterator.next() != null)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            System.out.println(iterator.next());</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//错误方式二：</span></span><br><span class=\"line\">        <span class=\"comment\">//集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(coll.iterator().hasNext())&#123;</span><br><span class=\"line\">            System.out.println(coll.iterator().next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"font-colorrediterator迭代器remove的使用font\"><a class=\"anchor\" href=\"#font-colorrediterator迭代器remove的使用font\">#</a> <a href=\"Collectionpractice5/CollectinoTest1.java\">&lt;font color=red&gt;Iterator 迭代器 remove () 的使用 &lt;/font&gt;</a></h5>\n<h5 id=\"java新特性foreach循环遍历集合或数组\"><a class=\"anchor\" href=\"#java新特性foreach循环遍历集合或数组\">#</a> java 新特性 foreach 循环遍历集合或数组</h5>\n<ul>\n<li>Java 5.0 提供了 foreach 循环迭代访问 Collection 和数组。</li>\n<li>遍历操作不需获取 Collection 或数组的长度，无需使用索引访问元素。</li>\n<li>遍历集合的底层调用 Iterator 完成操作。</li>\n<li>foreach 还可以用来遍历数组。<br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* jdk 5.0 新增了foreach循环，用于遍历集合、数组</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ForTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Collection</span> <span class=\"variable\">coll</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">        coll.add(<span class=\"number\">123</span>);</span><br><span class=\"line\">        coll.add(<span class=\"number\">456</span>);</span><br><span class=\"line\">        coll.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;Jerry&quot;</span>,<span class=\"number\">20</span>));</span><br><span class=\"line\">        coll.add(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;Tom&quot;</span>));</span><br><span class=\"line\">        coll.add(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//for(集合元素的类型 局部变量 : 集合对象),内部仍然调用了迭代器。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Object obj : coll)&#123;</span><br><span class=\"line\">            System.out.println(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//for(数组元素的类型 局部变量 : 数组对象)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i : arr)&#123;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//练习题</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        String[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;SS&quot;</span>,<span class=\"string\">&quot;KK&quot;</span>,<span class=\"string\">&quot;RR&quot;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        //方式一：普通for赋值</span></span><br><span class=\"line\"><span class=\"comment\">//        for(int i = 0;i &lt; arr.length;i++)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            arr[i] = &quot;HH&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//方式二：增强for循环</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String s : arr)&#123;</span><br><span class=\"line\">            s = <span class=\"string\">&quot;HH&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class=\"line\">            System.out.println(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n<img data-src=\"/images/2022-10-22-10-41-14.png\" alt=\"\" /></li>\n</ul>\n<h3 id=\"collection子接口之一list接口\"><a class=\"anchor\" href=\"#collection子接口之一list接口\">#</a> Collection 子接口之一：List 接口</h3>\n<ul>\n<li>通常用 list 替代数组</li>\n<li>List 集合类中元素有序、且可重复，集合中的每个元素都有其对应的顺序索引。</li>\n<li>List 容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素</li>\n<li>DK API 中 List 接口的实现类常用的有：ArrayList、LinkedList 和 Vector。</li>\n</ul>\n<h5 id=\"list接口常用实现类的对比\"><a class=\"anchor\" href=\"#list接口常用实现类的对比\">#</a> List 接口常用实现类的对比</h5>\n<ul>\n<li>区别<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. List接口框架</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*    |----Collection接口：单列集合，用来存储一个一个的对象</span></span><br><span class=\"line\"><span class=\"comment\">*          |----List接口：存储有序的、可重复的数据。  --&gt;“动态”数组,替换原有的数组</span></span><br><span class=\"line\"><span class=\"comment\">*              |----ArrayList：作为List接口的主要实现类；线程不安全的，效率高；底层使用Object[] elementData存储</span></span><br><span class=\"line\"><span class=\"comment\">*              |----LinkedList：对于频繁的插入、删除操作，使用此类效率比ArrayList高；底层使用双向链表存储</span></span><br><span class=\"line\"><span class=\"comment\">*              |----Vector：作为List接口的古老实现类；线程安全的，效率低；底层使用Object[] elementData存储</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* 面试题：比较ArrayList、LinkedList、Vector三者的异同？</span></span><br><span class=\"line\"><span class=\"comment\">*        同：三个类都是实现了List接口，存储数据的特点相同：存储有序的、可重复的数据</span></span><br><span class=\"line\"><span class=\"comment\">*        不同：见上</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"font-colorred-arraylist的源码分析font\"><a class=\"anchor\" href=\"#font-colorred-arraylist的源码分析font\">#</a> <a href=\"Collectionpractice5/ArrayList.md\">&lt;font color=red&gt;ArrayList 的源码分析 &lt;/font&gt;</a></h5>\n<h5 id=\"likedlist源码分析\"><a class=\"anchor\" href=\"#likedlist源码分析\">#</a> LikedList 源码分析</h5>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 3.LinkedList的源码分析：</span></span><br><span class=\"line\"><span class=\"comment\">  *       LinkedList list = new LinkedList(); 内部声明了Node类型的first和last属性，默认值为null</span></span><br><span class=\"line\"><span class=\"comment\">  *       list.add(123);//将123封装到Node中，创建了Node对象。</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  *       其中，Node定义为：体现了LinkedList的双向链表的说法</span></span><br><span class=\"line\"><span class=\"comment\">  *       private static class Node&lt;E&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  *            E item;</span></span><br><span class=\"line\"><span class=\"comment\">  *            Node&lt;E&gt; next;</span></span><br><span class=\"line\"><span class=\"comment\">  *            Node&lt;E&gt; prev;</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  *            Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  *            this.item = element;</span></span><br><span class=\"line\"><span class=\"comment\">  *            this.next = next;     //next变量记录下一个元素的位置</span></span><br><span class=\"line\"><span class=\"comment\">  *            this.prev = prev;     //prev变量记录前一个元素的位置</span></span><br><span class=\"line\"><span class=\"comment\">  *            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  *        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"/images/2022-10-14-19-57-05.png\" alt=\"\" /><br />\n<img data-src=\"/images/2022-10-14-19-57-17.png\" alt=\"\" /></p>\n<h5 id=\"list接口中的常用方法测试\"><a class=\"anchor\" href=\"#list接口中的常用方法测试\">#</a> List 接口中的常用方法测试</h5>\n<blockquote>\n<p>List 除了从 Collection 集合继承的方法外，List 集合里添加了一些根据索引来操作集合元素的方法</p>\n</blockquote>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>v</mi><mi>o</mi><mi>i</mi><mi>d</mi><mi>a</mi><mi>d</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>e</mi><mi>l</mi><mi>e</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{void add(intindex, Object ele)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:cyan;\">v</span><span class=\"mord mathnormal\" style=\"color:cyan;\">o</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span><span class=\"mord mathnormal\" style=\"color:cyan;\">a</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">x</span><span class=\"mpunct\" style=\"color:cyan;\">,</span><span class=\"mspace\" style=\"color:cyan;margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">O</span><span class=\"mord mathnormal\" style=\"color:cyan;\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;color:cyan;\">j</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">c</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:cyan;\">l</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 在 index 位置插入 ele 元素</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>b</mi><mi>o</mi><mi>o</mi><mi>l</mi><mi>e</mi><mi>a</mi><mi>n</mi><mi>a</mi><mi>d</mi><mi>d</mi><mi>A</mi><mi>l</mi><mi>l</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>C</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>s</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{boolean addAll(int index, Collection eles)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"color:cyan;\">b</span><span class=\"mord mathnormal\" style=\"color:cyan;\">o</span><span class=\"mord mathnormal\" style=\"color:cyan;\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:cyan;\">l</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">a</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">a</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span><span class=\"mord mathnormal\" style=\"color:cyan;\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:cyan;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:cyan;\">l</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">x</span><span class=\"mpunct\" style=\"color:cyan;\">,</span><span class=\"mspace\" style=\"color:cyan;margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;color:cyan;\">C</span><span class=\"mord mathnormal\" style=\"color:cyan;\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:cyan;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:cyan;\">l</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">c</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">o</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:cyan;\">l</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">s</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 从 index 位置开始将 eles 中的所有元素添加进来</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{Object get(int index)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">O</span><span class=\"mord mathnormal\" style=\"color:cyan;\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;color:cyan;\">j</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">c</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:cyan;\">g</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">x</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 获取指定 index 位置的元素</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>i</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mi>O</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>b</mi><mi>j</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{int indexOf(Object obj)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;color:cyan;\">f</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">O</span><span class=\"mord mathnormal\" style=\"color:cyan;\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;color:cyan;\">j</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">c</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">o</span><span class=\"mord mathnormal\" style=\"color:cyan;\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;color:cyan;\">j</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 返回 obj 在集合中首次出现的位置</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>i</mi><mi>n</mi><mi>t</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>t</mi><mi>I</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mi>O</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>b</mi><mi>j</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{int lastIndexOf(Object obj)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:cyan;\">l</span><span class=\"mord mathnormal\" style=\"color:cyan;\">a</span><span class=\"mord mathnormal\" style=\"color:cyan;\">s</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;color:cyan;\">I</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;color:cyan;\">f</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">O</span><span class=\"mord mathnormal\" style=\"color:cyan;\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;color:cyan;\">j</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">c</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">o</span><span class=\"mord mathnormal\" style=\"color:cyan;\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;color:cyan;\">j</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 返回 obj 在当前集合中末次出现的位置</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>m</mi><mi>o</mi><mi>v</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{Object remove(int index)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">O</span><span class=\"mord mathnormal\" style=\"color:cyan;\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;color:cyan;\">j</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">c</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">m</span><span class=\"mord mathnormal\" style=\"color:cyan;\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:cyan;\">v</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">x</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 移除指定 index 位置的元素，并返回此元素</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>s</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>e</mi><mi>l</mi><mi>e</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{Object set(int index, Object ele)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">O</span><span class=\"mord mathnormal\" style=\"color:cyan;\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;color:cyan;\">j</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">c</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">s</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">x</span><span class=\"mpunct\" style=\"color:cyan;\">,</span><span class=\"mspace\" style=\"color:cyan;margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">O</span><span class=\"mord mathnormal\" style=\"color:cyan;\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;color:cyan;\">j</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">c</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:cyan;\">l</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 设置指定 index 位置的元素为 ele</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"cyan\"><mrow><mi>L</mi><mi>i</mi><mi>s</mi><mi>t</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>L</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mi>n</mi><mi>t</mi><mi>f</mi><mi>r</mi><mi>o</mi><mi>m</mi><mi>I</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>i</mi><mi>n</mi><mi>t</mi><mi>t</mi><mi>o</mi><mi>I</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{cyan}{List subList(int fromIndex, int toIndex)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:cyan;\"><span class=\"mord mathnormal\" style=\"color:cyan;\">L</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">s</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">s</span><span class=\"mord mathnormal\" style=\"color:cyan;\">u</span><span class=\"mord mathnormal\" style=\"color:cyan;\">b</span><span class=\"mord mathnormal\" style=\"color:cyan;\">L</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">s</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mopen\" style=\"color:cyan;\">(</span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;color:cyan;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:cyan;\">r</span><span class=\"mord mathnormal\" style=\"color:cyan;\">o</span><span class=\"mord mathnormal\" style=\"color:cyan;\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;color:cyan;\">I</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">x</span><span class=\"mpunct\" style=\"color:cyan;\">,</span><span class=\"mspace\" style=\"color:cyan;margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"color:cyan;\">i</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">t</span><span class=\"mord mathnormal\" style=\"color:cyan;\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;color:cyan;\">I</span><span class=\"mord mathnormal\" style=\"color:cyan;\">n</span><span class=\"mord mathnormal\" style=\"color:cyan;\">d</span><span class=\"mord mathnormal\" style=\"color:cyan;\">e</span><span class=\"mord mathnormal\" style=\"color:cyan;\">x</span><span class=\"mclose\" style=\"color:cyan;\">)</span></span></span></span></span>: 返回从 fromIndex 到 toIndex 位置的子集合<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* 5.List接口的常用方法</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ListTest</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * 总结：常用方法</span></span><br><span class=\"line\"><span class=\"comment\">    * 增：add(Object obj)</span></span><br><span class=\"line\"><span class=\"comment\">    * 删：remove(int index) / remove(Object obj)</span></span><br><span class=\"line\"><span class=\"comment\">    * 改：set(int index, Object ele)</span></span><br><span class=\"line\"><span class=\"comment\">    * 查：get(int index)</span></span><br><span class=\"line\"><span class=\"comment\">    * 插：add(int index, Object ele)</span></span><br><span class=\"line\"><span class=\"comment\">    * 长度：size()</span></span><br><span class=\"line\"><span class=\"comment\">    * 遍历：① Iterator迭代器方式</span></span><br><span class=\"line\"><span class=\"comment\">    *      ② 增强for循环</span></span><br><span class=\"line\"><span class=\"comment\">    *      ③ 普通的循环</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ArrayList</span> <span class=\"variable\">list</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">        list.add(<span class=\"number\">123</span>);</span><br><span class=\"line\">        list.add(<span class=\"number\">456</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;AA&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//方式一：Iterator迭代器方式</span></span><br><span class=\"line\">        <span class=\"type\">Iterator</span> <span class=\"variable\">iterator</span> <span class=\"operator\">=</span> list.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(iterator.hasNext())&#123;</span><br><span class=\"line\">            System.out.println(iterator.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;***************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//方式二：增强for循环</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Object obj : list)&#123;</span><br><span class=\"line\">            System.out.println(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;***************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//方式三：普通for循环</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; list.size();i++)&#123;</span><br><span class=\"line\">            System.out.println(list.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tets2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ArrayList</span> <span class=\"variable\">list</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">        list.add(<span class=\"number\">123</span>);</span><br><span class=\"line\">        list.add(<span class=\"number\">456</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;AA&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;Tom&quot;</span>,<span class=\"number\">12</span>));</span><br><span class=\"line\">        list.add(<span class=\"number\">456</span>);</span><br><span class=\"line\">        <span class=\"comment\">//int indexOf(Object obj):返回obj在集合中首次出现的位置。如果不存在，返回-1.</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> list.indexOf(<span class=\"number\">4567</span>);</span><br><span class=\"line\">        System.out.println(index);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置。如果不存在，返回-1.</span></span><br><span class=\"line\">        System.out.println(list.lastIndexOf(<span class=\"number\">456</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Object remove(int index):移除指定index位置的元素，并返回此元素</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> list.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">        System.out.println(obj);</span><br><span class=\"line\">        System.out.println(list);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Object set(int index, Object ele):设置指定index位置的元素为ele</span></span><br><span class=\"line\">        list.set(<span class=\"number\">1</span>,<span class=\"string\">&quot;CC&quot;</span>);</span><br><span class=\"line\">        System.out.println(list);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的左闭右开区间的子集合</span></span><br><span class=\"line\">        <span class=\"type\">List</span> <span class=\"variable\">subList</span> <span class=\"operator\">=</span> list.subList(<span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">        System.out.println(subList);</span><br><span class=\"line\">        System.out.println(list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ArrayList</span> <span class=\"variable\">list</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">        list.add(<span class=\"number\">123</span>);</span><br><span class=\"line\">        list.add(<span class=\"number\">456</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;AA&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;Tom&quot;</span>,<span class=\"number\">12</span>));</span><br><span class=\"line\">        list.add(<span class=\"number\">456</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(list);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//void add(int index, Object ele):在index位置插入ele元素</span></span><br><span class=\"line\">        list.add(<span class=\"number\">1</span>,<span class=\"string\">&quot;BB&quot;</span>);</span><br><span class=\"line\">        System.out.println(list);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</span></span><br><span class=\"line\">        <span class=\"type\">List</span> <span class=\"variable\">list1</span> <span class=\"operator\">=</span> Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        list.addAll(list1);</span><br><span class=\"line\"><span class=\"comment\">//        list.add(list1);</span></span><br><span class=\"line\">        System.out.println(list.size());<span class=\"comment\">//9</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Object get(int index):获取指定index位置的元素</span></span><br><span class=\"line\">        System.out.println(list.get(<span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"collection子接口之二set接口\"><a class=\"anchor\" href=\"#collection子接口之二set接口\">#</a> Collection 子接口之二：Set 接口</h3>\n<ul>\n<li>Set 接口是 Collection 的子接口，set 接口没有提供额外的方法</li>\n<li>Set 集合不允许包含相同的元素，如果试把两个相同的元素加入同一个 Set 集合中，则添加操作失败。</li>\n<li>Set 判断两个对象是否相同不是使用 == 运算符，而是根据 equals () 方法</li>\n</ul>\n<h5 id=\"set接口实现类的对比\"><a class=\"anchor\" href=\"#set接口实现类的对比\">#</a> Set 接口实现类的对比</h5>\n<ul>\n<li>Set 接口的框架：<br />\n|----Collection 接口：单列集合，用来存储一个一个的对象<br />\n |----Set 接口：存储无序的、不可重复的数据   --&gt; 高中讲的 “集合”<br />\n|----HashSet：作为 Set 接口的主要实现类；线程不安全的；可以存储 null 值<br />\n |----LinkedHashSet：作为 HashSet 的子类；遍历其内部数据时，可以按照添加的顺序遍历<br />\n对于频繁的遍历操作，LinkedHashSet 效率高于 HashSet.<br />\n|----TreeSet：可以按照添加对象的指定属性，进行排序。</li>\n</ul>\n<h5 id=\"set的无序性与不可重复性的理解\"><a class=\"anchor\" href=\"#set的无序性与不可重复性的理解\">#</a> Set 的无序性与不可重复性的理解</h5>\n<ul>\n<li>无序性：不等于随机性。存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定的。</li>\n<li>不可重复性：保证添加的元素按照 equals () 判断时，不能返回 true. 即：相同的元素只能添加一个。</li>\n</ul>\n<h5 id=\"hashset中元素的添加过程\"><a class=\"anchor\" href=\"#hashset中元素的添加过程\">#</a> HashSet 中元素的添加过程</h5>\n<ul>\n<li>HashSet 是 Set 接口的典型实现，大多数时候使用 Set 集合时都使用这个实现类。</li>\n<li>HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存取、查找、删除性能。</li>\n<li>HashSet 具有以下特点：不能保证元素的排列顺序</li>\n</ul>\n<h1 id=\"泛型\"><a class=\"anchor\" href=\"#泛型\">#</a> 泛型</h1>\n<h5 id=\"为什么要有泛型\"><a class=\"anchor\" href=\"#为什么要有泛型\">#</a> 为什么要有泛型</h5>\n<blockquote>\n<p>泛型：标签<br />\n举例：中药店，每个抽屉外面贴着标签<br />\n超市购物架上很多瓶子，每个瓶子装的是什么，有标签</p>\n</blockquote>\n<h5 id=\"泛型的设计背景\"><a class=\"anchor\" href=\"#泛型的设计背景\">#</a> 泛型的设计背景</h5>\n<blockquote>\n<p>集合容器类在设计阶段 / 声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在 JDK1.5 之前只能把元素类型设计为 Object，<br />\nJDK1.5 之后使用泛型来解决。因为这个时候除了元素的类型不<br />\n确定，其他的部分是确定的，例如关于这个元素如何保存，如<br />\n何管理等是确定的，因此此时把元素的类型设计成一个参数，<br />\n这个类型参数叫做泛型。Collection，List，ArrayList 这<br />\n个就是类型参数，即泛型。</p>\n</blockquote>\n<h1 id=\"file类的使用\"><a class=\"anchor\" href=\"#file类的使用\">#</a> File 类的使用</h1>\n<p>线程看到 14 - 同步机制的课后练习<br />\n常用类看到 10-SimpleDateFor<br />\n 注解新特性</p>\n",
            "tags": [
                "java",
                "java",
                "基础"
            ]
        }
    ]
}